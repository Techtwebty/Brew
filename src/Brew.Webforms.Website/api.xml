<?xml version="1.0"?>
<api><categories><category name="Uncategorized" slug="uncategorized"/><category name="Effects" slug="effects">
		<desc>
			<p>jQuery UI adds quite a bit of functionality on top of <a href="http://api.jquery.com/category/effects/">jQuery's built-in effects</a>. jQuery UI adds support for animating colors and class transitions, as well as providing several additional <a href="/easings/">easings</a>. In addition, a full suite of custom effects are available for use when showing and hiding elements or just to add some visual appeal.</p>
		</desc>
	</category><category name="Widgets" slug="widgets">
		<desc>
			<p>Widgets are feature-rich, stateful plugins that have a full life-cycle, along with methods and events. Check out the <a href="/jQuery.widget/">widget factory</a> documentation for more details.</p>
		</desc>
	</category><category name="Interactions" slug="interactions">
		<desc>
			<p>jQuery UI provides a set of mouse-based interactions as building blocks for rich interfaces and complex widgets.</p>
		</desc>
	</category><category name="Utilities" slug="utilities"/><category name="Methods" slug="methods">
		<desc>
			<p>Although jQuery UI is mostly comprised of <a href="/category/widgets/">widgets</a>, <a href="/category/interactions/">interactions</a>, and <a href="/category/effects/">effects</a>, there are also a few simple methods that are added for convenience.</p>
		</desc>
	</category><category name="Selectors" slug="selectors"/><category name="Method Overrides" slug="overrides">
		<desc>
			<p>jQuery UI overrides several built-in jQuery methods in order to provide additional functionality. When using these overrides, it's important to make sure that jQuery UI is loaded. If jQuery UI is not loaded, the methods will still exist, but the expected functionality will not be available, resulting in bugs that may be hard to track down.</p>
		</desc>
	</category><category name="UI Core" slug="ui-core">
		<desc>
			<p>Functionality provided by jquery.ui.core.js.</p>
		</desc>
	</category><category name="Effects Core" slug="effects-core">
		<desc>
			<p>Functionality provided by jquery.ui.effect.js. In addition to the methods listed below, jquery.ui.effect.js also includes several <a href="/easings/">easings</a>.</p>
		</desc>
	</category><category name="All" slug="all"/></categories><entries><entry name="accordion" type="widget" widget-element="accordion">
	<title>Accordion Widget</title>
	<desc>Convert a pair of headers and content panels into an accordion.</desc>
	<longdesc>
		<p>The markup of your accordion container needs pairs of headers and content panels:</p>

		<pre><code data-linenum="true">
&lt;div id="accordion"&gt;
	&lt;h3&gt;First header&lt;/h3&gt;
	&lt;div&gt;First content panel&lt;/div&gt;
	&lt;h3&gt;Second header&lt;/h3&gt;
	&lt;div&gt;Second content panel&lt;/div&gt;
&lt;/div&gt;
</code></pre>

		<p>Accordions support arbitrary markup, but each content panel must always be the next sibling after its associated header. See the <a href="#option-header"><code>header</code></a> option for information on how to use custom markup structures.</p>
		<p>The panels can be activated programmatically by setting the <a href="#option-active"><code>active</code></a> option.</p>

		<h3>Keyboard interaction</h3>

		<p>When focus is on a header, the following key commands are available:</p>
		<ul>
			<li>UP/LEFT - Move focus to the previous header. If on first header, moves focus to last header.</li>
			<li>DOWN/RIGHT - Move focus to the next header. If on last header, moves focus to first header.</li>
			<li>HOME - Move focus to the first header.</li>
			<li>END - Move focus to the last header.</li>
			<li>SPACE/ENTER - Activate panel associated with focused header.</li>
		</ul>

		<p>When focus is in a panel:</p>
		<ul>
			<li>CTRL+UP: Move focus to associated header.</li>
		</ul>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/category/effects-core/">Effects Core</a> (optional; for use with the <a href="#option-animate"><code>animate</code></a> option)</li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.0</added>
	<options>
		<option name="active" default="0" example-value="2">
			<desc>
				Which panel is currently open.
			</desc>
			<type name="Boolean">
				<desc>Setting <code>active</code> to <code>false</code> will collapse all panels. This requires the <a href="#option-collapsible"><code>collapsible</code></a> option to be <code>true</code>.</desc>
			</type>
			<type name="Integer">
				<desc>The zero-based index of the panel that is active (open). A negative value selects panels going backward from the last panel.</desc>
			</type>
		</option>
		<option name="animate" default="{}" example-value="&quot;bounceslide&quot;">
			<desc>If and how to animate changing panels.</desc>
			<type name="Boolean">
				<desc>A value of <code>false</code> will disable animations.</desc>
			</type>
			<type name="Number">
				<desc>Duration in milliseconds with default easing.</desc>
			</type>
			<type name="String">
				<desc>Name of <a href="/easings/">easing</a> to use with default duration.</desc>
			</type>
			<type name="Object">
				<desc>Animation settings with <code>easing</code> and <code>duration</code> properties.
					<ul>
						<li>Can also contain a <code>down</code> property with any of the above options.</li>
						<li>"Down" animations occur when the panel being activated has a lower index than the currently active panel.</li>
					</ul>
				</desc>
			</type>
		</option>
		<option name="collapsible" type="Boolean" default="false" example-value="true">
			<desc>Whether all the sections can be closed at once. Allows collapsing the active section.</desc>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the accordion if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="event" type="String" default="&quot;click&quot;" example-value="&quot;mouseover&quot;">
			<desc>The event that accordion headers will react to in order to activate the associated panel. Multiple events can be specificed, separated by a space.</desc>
		</option>
		<option name="header" type="Selector" default="&quot;&gt; li &gt; :first-child,&gt; :not(li):even&quot;" example-value="&quot;h3&quot;">
			<desc>
				<p>Selector for the header element, applied via <code>.find()</code> on the main accordion element. Content panels must be the sibling immedately after their associated headers.</p>
			</desc>
		</option>
		<option name="heightStyle" type="String" default="&quot;auto&quot;" example-value="&quot;fill&quot;">
			<desc>
				<p>Controls the height of the accordion and each panel. Possible values:</p>
				<ul>
					<li><code>"auto"</code>: All panels will be set to the height of the tallest panel.</li>
					<li><code>"fill"</code>: Expand to the available height based on the accordion's parent height.</li>
					<li><code>"content"</code>: Each panel will be only as tall as its content.</li>
				</ul>
			</desc>
		</option>
		<option name="icons" type="Object" default="{ &quot;header&quot;: &quot;ui-icon-triangle-1-e&quot;, &quot;activeHeader&quot;: &quot;ui-icon-triangle-1-s&quot; }" example-value="{ &quot;header&quot;: &quot;ui-icon-plus&quot;, &quot;headerSelected&quot;: &quot;ui-icon-minus&quot; }">
			<desc>
				<p>Icons to use for headers, matching an icon defined by the jQuery UI CSS Framework. Set to <code>false</code> to have no icons displayed.</p>
				<ul>
					<li>header (string, default: "ui-icon-triangle-1-e")</li>
					<li>activeHeader (string, default: "ui-icon-triangle-1-s")</li>
				</ul>
			</desc>
		</option>
	</options>
	<events>
		<event name="activate">
			<desc>Triggered after a panel has been activated (after animation completes). If the accordion was previously collapsed, <code>ui.oldHeader</code> and <code>ui.oldPanel</code> will be empty jQuery objects. If the accordion is collapsing, <code>ui.newHeader</code> and <code>ui.newPanel</code> will be empty jQuery objects.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="newHeader" type="jQuery">
					<desc>The header that was just activated.</desc>
				</property>
				<property name="oldHeader" type="jQuery">
					<desc>The header that was just deactivated.</desc>
				</property>
				<property name="newPanel" type="jQuery">
					<desc>The panel that was just activated.</desc>
				</property>
				<property name="oldPanel" type="jQuery">
					<desc>The panel that was just deactivated.</desc>
				</property>
			</argument>
		</event>
		<event name="beforeActivate">
			<desc>Triggered directly before a panel is activated. Can be canceled to prevent the panel from activating. If the accordion is currently collapsed, <code>ui.oldHeader</code> and <code>ui.oldPanel</code> will be empty jQuery objects. If the accordion is collapsing, <code>ui.newHeader</code> and <code>ui.newPanel</code> will be empty jQuery objects.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="newHeader" type="jQuery">
					<desc>The header that is about to be activated.</desc>
				</property>
				<property name="oldHeader" type="jQuery">
					<desc>The header that is about to be deactivated.</desc>
				</property>
				<property name="newPanel" type="jQuery">
					<desc>The panel that is about to be activated.</desc>
				</property>
				<property name="oldPanel" type="jQuery">
					<desc>The panel that is about to be deactivated.</desc>
				</property>
			</argument>
		</event>
		<event name="create">
			<desc>Triggered when the accordion is created. If the accordion is collapsed, <code>ui.header</code> and <code>ui.panel</code> will be empty jQuery objects.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="header" type="jQuery">
					<desc>The active header.</desc>
				</property>
				<property name="panel" type="jQuery">
					<desc>The active panel.</desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="destroy">
	<desc>
		Removes the accordion functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the accordion.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the accordion.
	</desc>
</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the accordion.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current accordion options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the accordion option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the accordion.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="refresh">
			<desc>Recompute the height of the accordion panels. Results depend on the content and the <a href="#option-heightStyle"><code>heightStyle</code></a> option.</desc>
		</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the accordion.
	</desc>
</method>
	</methods>
	<example>
		<height>350</height>
		<desc>A simple jQuery UI Accordion</desc>
		<code>
$( "#accordion" ).accordion();
</code>
		<html>
&lt;div id="accordion"&gt;
	&lt;h3&gt;Section 1&lt;/h3&gt;
	&lt;div&gt;
		&lt;p&gt;Mauris mauris ante, blandit et, ultrices a, suscipit eget.
		Integer ut neque. Vivamus nisi metus, molestie vel, gravida in,
		condimentum sit amet, nunc. Nam a nibh. Donec suscipit eros.
		Nam mi. Proin viverra leo ut odio.&lt;/p&gt;
	&lt;/div&gt;
	&lt;h3&gt;Section 2&lt;/h3&gt;
	&lt;div&gt;
		&lt;p&gt;Sed non urna. Phasellus eu ligula. Vestibulum sit amet purus.
		Vivamus hendrerit, dolor aliquet laoreet, mauris turpis velit,
		faucibus interdum tellus libero ac justo.&lt;/p&gt;
	&lt;/div&gt;
	&lt;h3&gt;Section 3&lt;/h3&gt;
	&lt;div&gt;
		&lt;p&gt;Nam enim risus, molestie et, porta ac, aliquam ac, risus.
		Quisque lobortis.Phasellus pellentesque purus in massa.&lt;/p&gt;
		&lt;ul&gt;
			&lt;li&gt;List item one&lt;/li&gt;
			&lt;li&gt;List item two&lt;/li&gt;
			&lt;li&gt;List item three&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/div&gt;
&lt;/div&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="addClass" type="method" return="jQuery">
	<title>.addClass()</title>
	<desc>Adds the specified class(es) to each of the set of matched elements while animating all style changes.</desc>
	<longdesc>
		<div>
	<p>Similar to native CSS transitions, jQuery UI's class animations provide a smooth transition from one state to another while allowing you to keep all the details about which styles to change in CSS and out of your JavaScript. All class animation methods, including <code>.addClass()</code>, support custom durations and easings, as well as providing a callback for when the animation completes.</p>
	<p>Not all styles can be animated. For example, there is no way to animate a background image. Any styles that cannot be animated will be changed at the end of the animation.</p>
</div>
		<p>This plugin extends jQuery's built-in  method. If jQuery UI is not loaded, calling the <code>.addClass()</code> method may not fail directly, as the method still exists. However, the expected behavior will not occur.</p>
	</longdesc>
	<signature>
		<argument name="className" type="String">
			<desc>One or more class names (space separated) to be added to the class attribute of each matched element.</desc>
		</argument>
		<argument name="duration" default="400" optional="true">
	<desc>A string or number determining how long the animation will run.</desc>
	<type name="Number">
		<desc>The duration in milliseconds.</desc>
	</type>
	<type name="String">
		<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
	</type>
</argument>
		<argument name="easing" type="String" default="swing" optional="true">
	<desc>A string indicating which <a href="/easings/">easing</a> function to use for the transition.</desc>
</argument>
		<argument name="complete" type="Function" optional="true">
	<desc>A function to call once the animation is complete.</desc>
</argument>
	</signature>
	<example>
		<desc>Adds the class "big-blue" to the matched elements.</desc>
		<css>
	div {
		width: 100px;
		height: 100px;
		background-color: #ccc;
	}
	.big-blue {
		width: 200px;
		height: 200px;
		background-color: #00f;
	}
</css>
		<html>
&lt;div&gt;&lt;/div&gt;
</html>
		<code>
$( "div" ).click(function() {
	$( this ).addClass( "big-blue", 1000, "easeOutBounce" );
});
</code>
	</example>
	<category slug="effects"/>
	<category slug="effects-core"/>
	<category slug="overrides"/>
</entry><entry name="autocomplete" type="widget">
	<title>Autocomplete Widget</title>
	<desc>Autocomplete enables users to quickly find and select from a pre-populated list of values as they type, leveraging searching and filtering.</desc>
	<longdesc>
		<p>By giving an Autocomplete field focus or entering something into it, the plugin starts searching for entries that match and displays a list of values to choose from. By entering more characters, the user can filter down the list to better matches.</p>

		<p>This can be used to choose previously selected values, such as entering tags for articles or entering email addresses from an address book. Autocomplete can also be used to populate associated information, such as entering a city name and getting the zip code.</p>

		<p>You can pull data in from a local or remote source: Local is good for small data sets, e.g., an address book with 50 entries; remote is necessary for big data sets, such as a database with hundreds or millions of entries to select from. To find out more about customizing the data source, see the documentation for the <a href="#option-source"><code>source</code></a> option.</p>

		<h3>Keyboard interaction</h3>

		<p>When the menu is open, the following key commands are available:</p>
		<ul>
			<li>UP - Move focus to the previous item. If on first item, move focus to the input. If on the input, move focus to last item.</li>
			<li>DOWN - Move focus to the next item. If on last item, move focus to the input. If on the input, move focus to the first item.</li>
			<li>ESCAPE - Close the menu.</li>
			<li>ENTER - Select the currently focused item and close the menu.</li>
			<li>TAB - Select the currently focused item, close the menu, and move focus to the next focusable element.</li>
			<li>PAGE UP/DOWN - Scroll through a page of items (based on height of menu). <em>It's generally a bad idea to display so many items that users need to page.</em>.</li>
		</ul>

		<p>When the menu is closed, the following key commands are available:</p>
		<ul>
			<li>UP/DOWN - Open the menu, if the <a href="#option-minLength"><code>minLength</code></a> has been met.</li>
		</ul>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/position/">Position</a></li>
			<li><a href="/menu/">Menu</a></li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<note>
			This widget manipulates its element's value programmatically, therefore a native change may not be fired when the element's value changes.
		</note>
	<added>1.8</added>
	<options>
		<option name="appendTo" type="Selector" default="null" example-value="&quot;#someElem&quot;">
			<desc>Which element the menu should be appended to. When the value is <code>null</code>, the parents of the input field will be checked for a class of <code>ui-front</code>. If an element with the <code>ui-front</code> class is found, the menu will be appended to that element. Regardless of the value, if no element is found, the menu will be appended to the body.</desc>
		</option>
		<option name="autoFocus" type="Boolean" default="false" example-value="true">
			<desc>If set to <code>true</code> the first item will automatically be focused when the menu is shown.</desc>
		</option>
		<option name="delay" type="Integer" default="300" example-value="500">
			<desc>The delay in milliseconds between when a keystroke occurs and when a search is performed. A zero-delay makes sense for local data (more responsive), but can produce a lot of load for remote data, while being less responsive.</desc>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the autocomplete if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="minLength" type="Integer" default="1" example-value="0">
			<desc>The minimum number of characters a user must type before a search is performed. Zero is useful for local data with just a few items, but a higher value should be used when a single character search could match a few thousand items.</desc>
		</option>
		<option name="position" type="Object" default="{ my: &quot;left top&quot;, at: &quot;left bottom&quot;, collision: &quot;none&quot; }" example-value="{ my : &quot;right top&quot;, at: &quot;right bottom&quot; }">
			<desc>Identifies the position of the suggestions menu in relation to the associated input element. The <code>of</code> option defaults to the input element, but you can specify another element to position against. You can refer to the <a href="/position">jQuery UI Position</a> utility for more details about the various options.</desc>
		</option>
		<option name="source" default="none; must be specified" example-value="[ &quot;c++&quot;, &quot;java&quot;, &quot;php&quot;, &quot;coldfusion&quot;, &quot;javascript&quot;, &quot;asp&quot;, &quot;ruby&quot; ]">
			<desc>
				Defines the data to use, must be specified.
				<p>Independent of the variant you use, the label is always treated as text. If you want the label to be treated as html you can use <a href="https://github.com/scottgonzalez/jquery-ui-extensions/blob/master/autocomplete/jquery.ui.autocomplete.html.js">Scott González' html extension</a>. The demos all focus on different variations of the <code>source</code> option - look for one that matches your use case, and check out the code.</p>
			</desc>
			<type name="Array">
				<desc>
					An array can be used for local data. There are two supported formats:
					<ul>
						<li>An array of strings: <code>[ "Choice1", "Choice2" ]</code></li>
						<li>An array of objects with <code>label</code> and <code>value</code> properties: <code>[ { label: "Choice1", value: "value1" }, ... ]</code></li>
					</ul>
					The label property is displayed in the suggestion menu. The value will be inserted into the input element when a user selects an item. If just one property is specified, it will be used for both, e.g., if you provide only <code>value</code> properties, the value will also be used as the label.
				</desc>
			</type>
			<type name="String">
				<desc>When a string is used, the Autocomplete plugin expects that string to point to a URL resource that will return JSON data. It can be on the same host or on a different one (must provide JSONP). The Autocomplete plugin does not filter the results, instead a query string is added with a <code>term</code> field, which the server-side script should use for filtering the results. For example, if the <code>source</code> option is set to <code>"http://example.com"</code> and the user types <code>foo</code>, a GET request would be made to <code>http://example.com?term=foo</code>. The data itself can be in the same format as the local data described above.</desc>
			</type>
			<type name="Function">
				<argument name="request" type="Object"/>
				<argument name="response" type="Function">
					<argument name="data" type="Object"/>
				</argument>
				<desc>
					The third variation, a callback, provides the most flexibility and can be used to connect any data source to Autocomplete. The callback gets two arguments:
					<ul>
						<li>A <code>request</code> object, with a single <code>term</code> property, which refers to the value currently in the text input. For example, if the user enters <code>"new yo"</code> in a city field, the Autocomplete term will equal <code>"new yo"</code>.</li>
						<li>A <code>response</code> callback, which expects a single argument: the data to suggest to the user. This data should be filtered based on the provided term, and can be in any of the formats described above for simple local data. It's important when providing a custom source callback to handle errors during the request. You must always call the <code>response</code> callback even if you encounter an error. This ensures that the widget always has the correct state.</li>
					</ul>
					<p>When filtering data locally, you can make use of the built-in <code>$.ui.autocomplete.escapeRegex</code> function. It'll take a single string argument and escape all regex characters, making the result safe to pass to <code>new RegExp()</code>.</p>
				</desc>
			</type>
		</option>
	</options>
	<events>
		<event name="change">
			<desc>Triggered when the field is blurred, if the value has changed.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="item" type="jQuery">
					<desc>The item selected from the menu, if any. Otherwise the property is <code>null</code>.</desc>
				</property>
			</argument>
		</event>
		<event name="close">
			<desc>Triggered when the menu is hidden. Not every <code>close</code> event will be accompanied by a <code>change</code> event.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="create">
	<desc>
		Triggered when the autocomplete is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="focus">
			<desc>
				Triggered when focus is moved to an item (not selecting). The default action is to replace the text field's value with the value of the focused item, though only if the event was triggered by a keyboard interaction.
				<p>Canceling this event prevents the value from being updated, but does not prevent the menu item from being focused.</p>
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="item" type="jQuery">
					<desc>The focused item.</desc>
				</property>
			</argument>
		</event>
		<event name="open">
			<desc>Triggered when the suggestion menu is opened or updated.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="response">
			<desc>Triggered after a search completes, before the menu is shown. Useful for local manipulation of suggestion data, where a custom <a href="#option-source"><code>source</code></a> option callback is not required. This event is always triggered when a search completes, even if the menu will not be shown because there are no results or the Autocomplete is disabled.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="content" type="Array">
					<desc>Contains the response data and can be modified to change the results that will be shown. This data is already normalized, so if you modify the data, make sure to include both <code>value</code> and <code>label</code> properties for each item.</desc>
				</property>
			</argument>
		</event>
		<event name="search">
			<desc>Triggered before a search is performed, after <a href="#option-minLength"><code>minLength</code></a> and <a href="#option-delay"><code>delay</code></a> are met. If canceled, then no request will be started and no items suggested.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="select">
			<desc>
				Triggered when an item is selected from the menu. The default action is to replace the text field's value with the value of the selected item.
				<p>Canceling this event prevents the value from being updated, but does not prevent the menu from closing.</p>
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="item" type="jQuery">
					<desc>The selected item.</desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="close">
			<desc>Closes the Autocomplete menu. Useful in combination with the <a href="#method-search"><code>search</code></a> method, to close the open menu.</desc>
		</method>
		<method name="destroy">
	<desc>
		Removes the autocomplete functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the autocomplete.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the autocomplete.
	</desc>
</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the autocomplete.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current autocomplete options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the autocomplete option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the autocomplete.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="search" example-params="&quot;&quot;">
			<desc>Triggers a <a href="#event-search"><code>search</code></a> event and invokes the data source if the event is not canceled. Can be used by a selectbox-like button to open the suggestions when clicked. When invoked with no parameters, the current input's value is used. Can be called with an empty string and <code>minLength: 0</code> to display all items.</desc>
			<argument name="value" type="String" optional="true">
				<desc/>
			</argument>
		</method>
		<method name="widget" return="jQuery">
			<desc>Returns a <code>jQuery</code> object containing the menu element. Although the menu items are constantly created and destroyed, the menu element itself is created during initialization and is constantly reused.</desc>
		</method>
	</methods>
	<example>
		<desc>A simple jQuery UI Autocomplete</desc>
		<code>
$( "#autocomplete" ).autocomplete({
	source: [ "c++", "java", "php", "coldfusion", "javascript", "asp", "ruby" ]
});
</code>
		<html>
&lt;label for="autocomplete"&gt;Select a programming language: &lt;/label&gt;
&lt;input id="autocomplete"&gt;
</html>
	</example>
	<example>
		<desc>Using a custom source callback to match only the beginning of terms</desc>
		<code>
var tags = [ "c++", "java", "php", "coldfusion", "javascript", "asp", "ruby" ];
$( "#autocomplete" ).autocomplete({
	source: function( request, response ) {
	        var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( request.term ), "i" );
	        response( $.grep( tags, function( item ){
	            return matcher.test( item );
	        }) );
	    }
});
</code>
		<html>
&lt;label for="autocomplete"&gt;Select a programming language: &lt;/label&gt;
&lt;input id="autocomplete"&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="blind" type="effect">
	<title>Blind Effect</title>
	<desc>
		The blind effect hides or shows an element by wrapping the element in a container, and "pulling the blinds"
	</desc>
	<longdesc>
		<p>The container has <code>overflow: hidden</code> applied, so height changes affect what's visible.</p>
	</longdesc>
	<arguments>
		<argument name="direction" type="String" default="&quot;up&quot;">
			<desc>
				<p>The direction the blind will be pulled to hide the element, or the direction from which the element will be revealed.</p>
				<p>Possible Values: <code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>, <code>vertical</code>, <code>horizontal</code>.</p>
			</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the blind effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "blind" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="bounce" type="effect">
	<title>Bounce Effect</title>
	<desc>
		The bounce effect bounces an element.  When used with hide or show, the last or first bounce will also fade in/out.
	</desc>
	<arguments>
		<argument name="distance" type="Number" default="20">
			<desc>The distance of the largest "bounce" in pixels.</desc>
		</argument>
		<argument name="times" type="Integer" default="5">
			<desc>The number of times the element will bounce. When used with hide or show, there is an extra "half" bounce for the fade in/out.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the bounce effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "bounce", { times: 3 }, "slow" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="button" type="widget" widget-element="element visually representing the button">
	<title>Button Widget</title>
	<desc>Themeable buttons and button sets.</desc>
	<longdesc>
		<p>Button enhances standard form elements like buttons, inputs and anchors to themeable buttons with appropriate hover and active styles.</p>

		<p>In addition to basic push buttons, radio buttons and checkboxes (inputs of type radio and checkbox) can be converted to buttons. Their associated label is styled to appear as the button, while the underlying input is updated on click. For the association to work properly, give the input an <code>id</code> attribute, and refer to that in the label's <code>for</code> attribute. Don't nest the input inside the label, as that <a href="http://www.paciellogroup.com/blog/2011/07/html5-accessibility-chops-form-control-labeling/">causes accessibility problems</a>.</p>

		<p>In order to group radio buttons, Button also provides an additional widget, called Buttonset. Buttonset is used by selecting a container element (which contains the radio buttons) and calling <code>.buttonset()</code>. Buttonset will also provide visual grouping, and therefore should be used whenever you have a group of buttons. It works by selecting all descendants and applying <code>.button()</code> to them. You can enable and disable a button set, which will enable and disable all contained buttons. Destroying a button set also calls each button's <code>destroy</code> method.</p>

		<p>When using an input of type button, submit or reset, support is limited to plain text labels with no icons.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.8</added>
	<options>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the button if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="icons" default="{ primary: null, secondary: null }" example-value="{ primary: &quot;ui-icon-gear&quot;, secondary: &quot;ui-icon-triangle-1-s&quot; }">
			<desc>Icons to display, with or without text (see <a href="#option-text"><code>text</code></a> option). By default, the primary icon is displayed on the left of the label text and the secondary is displayed on the right. The positioning can be controlled via CSS. The value for the <code>primary</code> and <code>secondary</code> properties must be a class name, e.g., <code>"ui-icon-gear"</code>. For using only one icon: <code>icons: { primary: "ui-icon-locked" }</code>. For using two icons: <code>icons: { primary: "ui-icon-gear", secondary: "ui-icon-triangle-1-s" }</code>.</desc>
			<type name="Object"/>
		</option>
		<option name="label" default="null" example-value="&quot;custom label&quot;">
			<desc>Text to show in the button. When not specified (<code>null</code>), the element's HTML content is used, or its <code>value</code> attribute if the element is an input element of type submit or reset, or the HTML content of the associated label element if the element is an input of type radio or checkbox.</desc>
			<type name="String"/>
		</option>
		<option name="text" default="true" example-value="false">
			<desc>Whether to show the label. When set to <code>false</code> no text will be displayed, but the <a href="#options-icons"><code>icons</code></a> option must be enabled, otherwise the <code>text</code> option will be ignored.</desc>
			<type name="Boolean"/>
		</option>
	</options>
	<events>
		<event name="create">
	<desc>
		Triggered when the button is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
	</events>
	<methods>
		<method name="destroy">
	<desc>
		Removes the button functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the button.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the button.
	</desc>
</method>
		<method name="refresh">
			<desc>Refreshes the visual state of the button. Useful for updating button state after the native element's checked or disabled state is changed programmatically.</desc>
		</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the button.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current button options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the button option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the button.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the element visually representing the button.
	</desc>
</method>
	</methods>
	<example>
		<height>100</height>
		<desc>A simple jQuery UI Button</desc>
		<code>
$( "button" ).button();
</code>
		<html>
&lt;button&gt;Button label&lt;/button&gt;
</html>
	</example>
	<example>
		<height>100</height>
		<desc>A simple jQuery UI Buttonset</desc>
		<code>
$( "#radio" ).buttonset();
</code>
		<html>
&lt;div id="radio"&gt;
	&lt;input type="radio" id="radio1" name="radio"&gt;&lt;label for="radio1"&gt;Choice 1&lt;/label&gt;
	&lt;input type="radio" id="radio2" name="radio" checked="checked"&gt;&lt;label for="radio2"&gt;Choice 2&lt;/label&gt;
	&lt;input type="radio" id="radio3" name="radio"&gt;&lt;label for="radio3"&gt;Choice 3&lt;/label&gt;
&lt;/div&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="clip" type="effect">
	<title>Clip Effect</title>
	<desc>
		The clip effect will hide or show an element by clipping the element vertically or horizontally.
	</desc>
	<arguments>
		<argument name="direction" type="String" default="&quot;up&quot;">
			<desc>
				<p>The plane in which the clip effect will hide or show its element.</p>
				<p><code>vertical</code> clips the top and bottom edges, while <code>horizontal</code> clips the right and left edges.</p>
			</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the clip effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "clip" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry type="selector" name="data">
	<title>:data() Selector</title>
	<sample>:data(key)</sample>
	<signature>
		<argument name="key" type="String">
			<desc>The data key.</desc>
		</argument>
	</signature>
	<desc>Selects elements which have data stored under the specified key.</desc>
	<longdesc>
		<p>The expression <code>$( "div:data(foo)")</code> matches a <code>&lt;div&gt;</code> if it has data stored via <code>.data( "foo", value )</code>.</p>
	</longdesc>
	<example>
		<height>120</height>
		<desc>Select elements with data and change their background color.</desc>
		<css>
	div {
		width: 100px;
		height: 100px;
		border: 1px solid #000;
		float: left;
	}
</css>
		<html>
&lt;div id="one"&gt;&lt;/div&gt;
&lt;div id="two"&gt;&lt;/div&gt;
&lt;div id="three"&gt;&lt;/div&gt;
</html>
		<code>
$( "#one" ).data( "color", "blue" );
$( "#three" ).data( "color", "green" );

$( ":data(color)" ).each(function() {
	var element = $( this );
	element.css( "backgroundColor", element.data( "color" ) );
});
</code>
	</example>
	<category slug="selectors"/>
	<category slug="ui-core"/>
</entry><entry name="datepicker" type="widget" widget-element="datepicker">
	<title>Datepicker Widget</title>
	<desc>Select a date from a popup or inline calendar</desc>
	<longdesc>
		<p>The jQuery UI Datepicker is a highly configurable plugin that adds datepicker functionality to your pages. You can customize the date format and language, restrict the selectable date ranges and add in buttons and other navigation options easily.</p>

		<p>By default, the datepicker calendar opens in a small overlay when the associated text field gains focus. For an inline calendar, simply attach the datepicker to a div or span.</p>

		<h3>Keyboard interaction</h3>
		<p>While the datepicker is open, the following key commands are available:</p>
		<ul>
			<li>PAGE UP: Move to the previous month.</li>
			<li>PAGE DOWN: Move to the next month.</li>
			<li>CTRL+PAGE UP: Move to the previous year.</li>
			<li>CTRL+PAGE DOWN: Move to the next year.</li>
			<li>CTRL+HOME: Move to the current month. Open the datepicker if closed.</li>
			<li>CTRL+LEFT: Move to the previous day.</li>
			<li>CTRL+RIGHT: Move to the next day.</li>
			<li>CTRL+UP: Move to the previous week.</li>
			<li>CTRL+DOWN: Move the next week.</li>
			<li>ENTER: Select the focused date.</li>
			<li>CTRL+END: Close the datepicker and erase the date.</li>
			<li>ESCAPE: Close the datepicker without selection.</li>
		</ul>

		<h3 id="utility-functions">Utility functions</h3>

		<h4 id="utility-setDefaults">$.datepicker.setDefaults( settings )</h4>
		<p>Change the default settings for all date pickers.</p>
		<p>Use the <a href="#method-option"><code>option()</code></a> method to change settings for individual instances.</p>
		<div>
			<strong>Code examples:</strong>
			<p>Set all date pickers to open on focus or a click on an icon.</p>
			<pre><code>
				$.datepicker.setDefaults({
					showOn: "both",
					buttonImageOnly: true,
					buttonImage: "calendar.gif",
					buttonText: "Calendar"
				});
			</code></pre>
			<p>Set all date pickers to have French text.</p>
			<pre><code>
				$.datepicker.setDefaults( $.datepicker.regional[ "fr" ] );
			</code></pre>
		</div>

		<h4 id="utility-formatDate">$.datepicker.formatDate( format, date, settings )</h4>
		<p>Format a date into a string value with a specified format.</p>
		<p>The format can be combinations of the following:</p>
		<ul>
			<li>d - day of month (no leading zero)</li>
			<li>dd - day of month (two digit)</li>
			<li>o - day of the year (no leading zeros)</li>
			<li>oo - day of the year (three digit)</li>
			<li>D - day name short</li>
			<li>DD - day name long</li>
			<li>m - month of year (no leading zero)</li>
			<li>mm - month of year (two digit)</li>
			<li>M - month name short</li>
			<li>MM - month name long</li>
			<li>y - year (two digit)</li>
			<li>yy - year (four digit)</li>
			<li>@ - Unix timestamp (ms since 01/01/1970)</li>
			<li> ! - Windows ticks (100ns since 01/01/0001)</li>
			<li>'...' - literal text</li>
			<li>'' - single quote</li>
			<li>anything else - literal text</li>
		</ul>
		<p>There are also a number of predefined standard date formats available from <code>$.datepicker</code>:</p>
		<ul>
			<li>ATOM - 'yy-mm-dd' (Same as RFC 3339/ISO 8601)</li>
			<li>COOKIE - 'D, dd M yy'</li>
			<li>ISO_8601 - 'yy-mm-dd'</li>
			<li>RFC_822 - 'D, d M y' (See RFC 822)</li>
			<li>RFC_850 - 'DD, dd-M-y' (See RFC 850)</li>
			<li>RFC_1036 - 'D, d M y' (See RFC 1036)</li>
			<li>RFC_1123 - 'D, d M yy' (See RFC 1123)</li>
			<li>RFC_2822 - 'D, d M yy' (See RFC 2822)</li>
			<li>RSS - 'D, d M y' (Same as RFC 822)</li>
			<li>TICKS - '!'</li>
			<li>TIMESTAMP - '@'</li>
			<li>W3C - 'yy-mm-dd' (Same as ISO 8601)</li>
		</ul>
		<div>
			<strong>Code examples:</strong>
			<p>Display the date in ISO format. Produces "2007-01-26".</p>
			<pre><code>
				$.datepicker.formatDate( "yy-mm-dd", new Date( 2007, 1 - 1, 26 ) );
			</code></pre>
			<p>Display the date in expanded French format. Produces "Samedi, Juillet 14, 2007".</p>
			<pre><code>
				$.datepicker.formatDate( "DD, MM d, yy", new Date( 2007, 7 - 1, 14 ), {
					dayNamesShort: $.datepicker.regional[ "fr" ].dayNamesShort,
					dayNames: $.datepicker.regional[ "fr" ].dayNames,
					monthNamesShort: $.datepicker.regional[ "fr" ].monthNamesShort,
					monthNames: $.datepicker.regional[ "fr" ].monthNames
				});
			</code></pre>
		</div>

		<h4 id="utility-parseDate">$.datepicker.parseDate( format, value, settings )</h4>
		<p>Extract a date from a string value with a specified format.</p>
		<p>The format can be combinations of the following:</p>
		<ul>
			<li>d - day of month (no leading zero)</li>
			<li>dd - day of month (two digit)</li>
			<li>o - day of year (no leading zeros)</li>
			<li>oo - day of year (three digit)</li>
			<li>D - day name short</li>
			<li>DD - day name long</li>
			<li>m - month of year (no leading zero)</li>
			<li>mm - month of year (two digit)</li>
			<li>M - month name short</li>
			<li>MM - month name long</li>
			<li>y - year (two digit)</li>
			<li>yy - year (four digit)</li>
			<li>@ - Unix timestamp (ms since 01/01/1970)</li>
			<li> ! - Windows ticks (100ns since 01/01/0001)</li>
			<li>'...' - literal text</li>
			<li>'' - single quote</li>
			<li>anything else - literal text</li>
		</ul>
		<p>A number of exceptions may be thrown:</p>
		<ul>
			<li>'Invalid arguments' if either format or value is null</li>
			<li>'Missing number at position nn' if format indicated a numeric value that is not then found</li>
			<li>'Unknown name at position nn' if format indicated day or month name that is not then found</li>
			<li>'Unexpected literal at position nn' if format indicated a literal value that is not then found</li>
			<li>'Invalid date' if the date is invalid, such as '31/02/2007'</li>
		</ul>
		<div>
			<strong>Code examples:</strong>
			<p>Extract a date in ISO format.</p>
			<pre><code>
				$.datepicker.parseDate( "yy-mm-dd", "2007-01-26" );
			</code></pre>
			<p>Extract a date in expanded French format.</p>
			<pre><code>
				$.datepicker.parseDate( "DD, MM d, yy", "Samedi, Juillet 14, 2007", {
					shortYearCuroff: 20,
					dayNamesShort: $.datepicker.regional[ "fr" ].dayNamesShort,
					dayNames: $.datepicker.regional[ "fr" ].dayNames,
					monthNamesShort: $.datepicker.regional[ "fr" ].monthNamesShort,
					monthNames: $.datepicker.regional[ "fr" ].monthNames
				});
			</code></pre>
		</div>

		<h4 id="utility-iso8601Week">$.datepicker.iso8601Week( date )</h4>
		<p>Determine the week of the year for a given date: 1 to 53.</p>
		<p>This function uses the ISO 8601 definition of a week: weeks start on a Monday and the first week of the year contains January 4. This means that up to three days from the previous year may be included in the of first week of the current year, and that up to three days from the current year may be included in the last week of the previous year.</p>
		<p>This function is the default implementation for the <a href="#option-calculateWeek"><code>calculateWeek</code></a> option.</p>
		<div>
			<strong>Code examples:</strong>
			<p>Find the week of the year for a date.</p>
			<pre><code>
				$.datepicker.iso8601Week( new Date( 2007, 1 - 1, 26 ) );
			</code></pre>
		</div>

		<h4 id="utility-noWeekends">$.datepicker.noWeekends</h4>
		<p>Set as beforeShowDay function to prevent selection of weekends.</p>
		<p>We can provide the <code>noWeekends()</code> function into the <a href="#option-beforeShowDay"><code>beforeShowDay</code></a> option which will calculate all the weekdays and provide an array of <code>true</code>/<code>false</code> values indicating whether a date is selectable.</p>
		<div>
			<strong>Code examples:</strong>
			<p>Set the DatePicker so no weekend is selectable</p>
			<pre><code>
				$( "#datepicker" ).datepicker({
					beforeShowDay: $.datepicker.noWeekends
				});
			</code></pre>
		</div>

		<h3>Localization</h3>
		<p>Datepicker provides support for localizing its content to cater for different languages and date formats. Each localization is contained within its own file with the language code appended to the name, e.g., <code>jquery.ui.datepicker-fr.js</code> for French. The desired localization file should be included after the main datepicker code. Each localization file adds its settings to the set of available localizations and automatically applies them as defaults for all instances.</p>
		<p>The <code>$.datepicker.regional</code> attribute holds an array of localizations, indexed by language code, with <code>""</code> referring to the default (English). Each entry is an object with the following attributes: <code>closeText</code>, <code>prevText</code>, <code>nextText</code>, <code>currentText</code>, <code>monthNames</code>, <code>monthNamesShort</code>, <code>dayNames</code>, <code>dayNamesShort</code>, <code>dayNamesMin</code>, <code>weekHeader</code>, <code>dateFormat</code>, <code>firstDay</code>, <code>isRTL</code>, <code>showMonthAfterYear</code>, and <code>yearSuffix</code>.</p>
		<p>You can restore the default localizations with:</p>
		<code>$.datepicker.setDefaults( $.datepicker.regional[ "" ] );</code>
		<p>And can then override an individual datepicker for a specific locale:</p>
		<code>$( selector ).datepicker( $.datepicker.regional[ "fr" ] );</code>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/category/effects-core/">Effects Core</a> (optional; for use with the <a href="#option-showAnim"><code>showAnim</code></a> option)</li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<note>
			This widget manipulates its element's value programmatically, therefore a native change may not be fired when the element's value changes.
		</note>
	<added>1.0</added>
	<options>
		<option name="altField" default="&quot;&quot;" example-value="&quot;#actualDate&quot;">
			<desc>An input element that is to be updated with the selected date from the datepicker. Use the <a href="#option-altFormat"><code>altFormat</code></a> option to change the format of the date within this field. Leave as blank for no alternate field.</desc>
			<type name="Selector"/>
			<type name="jQuery"/>
			<type name="Element"/>
		</option>
		<option name="altFormat" type="String" default="&quot;&quot;" example-value="&quot;yy-mm-dd&quot;">
			<desc>The <a href="#option-dateFormat"><code>dateFormat</code></a> to be used for the <a href="#option-altField"><code>altField</code></a> option. This allows one date format to be shown to the user for selection purposes, while a different format is actually sent behind the scenes. For a full list of the possible formats see the <a href="#utility-formatDate"><code>formatDate</code></a> function</desc>
		</option>
		<option name="appendText" type="String" default="&quot;&quot;" example-value="&quot;(yyyy-mm-dd)&quot;">
			<desc>The text to display after each date field, e.g., to show the required format.</desc>
		</option>
		<option name="autoSize" type="Boolean" default="false" example-value="true">
			<desc>Set to <code>true</code> to automatically resize the input field to accommodate dates in the current <a href="#option-dateFormat"><code>dateFormat</code></a>.</desc>
		</option>
		<option name="buttonImage" type="String" default="&quot;&quot;" example-value="&quot;/images/datepicker.gif&quot;">
			<desc>The URL for the popup button image. If set, the <a href="#option-buttonText"><code>buttonText</code></a> option becomes the <code>alt</code> value and is not directly displayed.</desc>
		</option>
		<option name="buttonImageOnly" type="Boolean" default="false" example-value="true">
			<desc>Whether the button image should be rendered by itself instead of inside a button element.</desc>
		</option>
		<option name="buttonText" type="String" default="&quot;...&quot;" example-value="&quot;Choose&quot;">
			<desc>The text to display on the trigger button. Use in conjunction with the <a href="#option-showOn"><code>showOn</code></a> option set to <code>"button"</code> or <code>"both"</code>.</desc>
		</option>
		<option name="calculateWeek" type="Function" default="jQuery.datepicker.iso8601Week" example-value="myWeekCalc">
			<desc>A function to calculate the week of the year for a given date. The default implementation uses the ISO 8601 definition: weeks start on a Monday; the first week of the year contains the first Thursday of the year.</desc>
		</option>
		<option name="changeMonth" type="Boolean" default="false" example-value="true">
			<desc>Whether the month should be rendered as a dropdown instead of text.</desc>
		</option>
		<option name="changeYear" type="Boolean" default="false" example-value="true">
			<desc>Whether the year should be rendered as a dropdown instead of text. Use the <a href="#option-yearRange"><code>yearRange</code></a> option to control which years are made available for selection.</desc>
		</option>
		<option name="closeText" type="String" default="&quot;Done&quot;" example-value="&quot;Close&quot;">
			<desc>The text to display for the close link. Use the <a href="#option-showButtonPanel"><code>showButtonPanel</code></a> option to display this button.</desc>
		</option>
		<option name="constrainInput" type="Boolean" default="true" example-value="false">
			<desc>When <code>true</code>, entry in the input field is constrained to those characters allowed by the current <a href="#option-dateFormat"><code>dateFormat</code></a> option.</desc>
		</option>
		<option name="currentText" type="String" default="&quot;Today&quot;" example-value="&quot;Now&quot;">
			<desc>The text to display for the current day link. Use the <a href="#option-showButtonPanel"><code>showButtonPanel</code></a> option to display this button.</desc>
		</option>
		<option name="dateFormat" type="String" default="&quot;mm/dd/yy&quot;" example-value="&quot;yy-mm-dd&quot;">
			<desc>The format for parsed and displayed dates. For a full list of the possible formats see the <code><a href="#utility-formatDate"><code>formatDate</code></a></code> function.</desc>
		</option>
		<option name="dayNames" type="Array" default="[ &quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot; ]" example-value="[ &quot;Dimanche&quot;, &quot;Lundi&quot;, &quot;Mardi&quot;, &quot;Mercredi&quot;, &quot;Jeudi&quot;, &quot;Vendredi&quot;, &quot;Samedi&quot; ]">
			<desc>The list of long day names, starting from Sunday, for use as requested via the <a href="#option-dateFormat"><code>dateFormat</code></a> option.</desc>
		</option>
		<option name="dayNamesMin" type="Array" default="[ &quot;Su&quot;, &quot;Mo&quot;, &quot;Tu&quot;, &quot;We&quot;, &quot;Th&quot;, &quot;Fr&quot;, &quot;Sa&quot; ]" example-value="[ &quot;Di&quot;, &quot;Lu&quot;, &quot;Ma&quot;, &quot;Me&quot;, &quot;Je&quot;, &quot;Ve&quot;, &quot;Sa&quot; ]">
			<desc>The list of minimised day names, starting from Sunday, for use as column headers within the datepicker.</desc>
		</option>
		<option name="dayNamesShort" type="Array" default="[ &quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot; ]" example-value="[ &quot;Dim&quot;, &quot;Lun&quot;, &quot;Mar&quot;, &quot;Mer&quot;, &quot;Jeu&quot;, &quot;Ven&quot;, &quot;Sam&quot; ]">
			<desc>The list of abbreviated day names, starting from Sunday, for use as requested via the <a href="#option-dateFormat"><code>dateFormat</code></a> option.</desc>
		</option>
		<option name="defaultDate" default="null" example-value="+7">
			<desc>Set the date to highlight on first opening if the field is blank. Specify either an actual date via a Date object or as a string in the current <a href="#option-dateFormat"><code>dateFormat</code></a>, or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.</desc>
			<type name="Date">
				<desc>A date object containing the default date.</desc>
			</type>
			<type name="Number">
				<desc>A number of days from today. For example <code>2</code> represents two days from today and <code>-1</code> represents yesterday.</desc>
			</type>
			<type name="String">
				<desc>A string in the format defined by the <a href="#option-dateFormat"><code>dateFormat</code></a> option, or a relative date. Relative dates must contain value and period pairs; valid periods are <code>"y"</code> for years, <code>"m"</code> for months, <code>"w"</code> for weeks, and <code>"d"</code> for days. For example, <code>"+1m +7d"</code> represents one month and seven days from today.</desc>
			</type>
		</option>
		<option name="duration" default="&quot;normal&quot;" example-value="&quot;slow&quot;">
			<desc>Control the speed at which the datepicker appears, it may be a time in milliseconds or a string representing one of the three predefined speeds ("slow", "normal", "fast").</desc>
			<type nmae="Number"/>
			<type name="String"/>
		</option>
		<option name="firstDay" type="Integer" default="0" example-value="1">
			<desc>Set the first day of the week: Sunday is <code>0</code>, Monday is <code>1</code>, etc.</desc>
		</option>
		<option name="gotoCurrent" type="Boolean" default="false" example-value="true">
			<desc>When <code>true</code>, the current day link moves to the currently selected date instead of today.</desc>
		</option>
		<option name="hideIfNoPrevNext" type="Boolean" default="false" example-value="true">
			<desc>Normally the previous and next links are disabled when not applicable (see the <a href="#option-minDate"><code>minDate</code></a> and <a href="#option-maxDate"><code>maxDate</code></a> options). You can hide them altogether by setting this attribute to <code>true</code>.</desc>
		</option>
		<option name="isRTL" type="Boolean" default="false" example-value="true">
			<desc>Whether the current language is drawn from right to left.</desc>
		</option>
		<option name="maxDate" default="null" example-value="&quot;+1m +1w&quot;">
			<desc>The maximum selectable date. When set to <code>null</code>, there is no maximum.</desc>
			<type name="Date">
				<desc>A date object containing the maximum date.</desc>
			</type>
			<type name="Number">
				<desc>A number of days from today. For example <code>2</code> represents two days from today and <code>-1</code> represents yesterday.</desc>
			</type>
			<type name="String">
				<desc>A string in the format defined by the <a href="#option-dateFormat"><code>dateFormat</code></a> option, or a relative date. Relative dates must contain value and period pairs; valid periods are <code>"y"</code> for years, <code>"m"</code> for months, <code>"w"</code> for weeks, and <code>"d"</code> for days. For example, <code>"+1m +7d"</code> represents one month and seven days from today.</desc>
			</type>
		</option>
		<option name="minDate" default="null" example-value="new Date(2007, 1 - 1, 1)">
			<desc>The minimum selectable date. When set to <code>null</code>, there is no minimum.</desc>
			<type name="Date">
				<desc>A date object containing the minimum date.</desc>
			</type>
			<type name="Number">
				<desc>A number of days from today. For example <code>2</code> represents two days from today and <code>-1</code> represents yesterday.</desc>
			</type>
			<type name="String">
				<desc>A string in the format defined by the <a href="#option-dateFormat"><code>dateFormat</code></a> option, or a relative date. Relative dates must contain value and period pairs; valid periods are <code>"y"</code> for years, <code>"m"</code> for months, <code>"w"</code> for weeks, and <code>"d"</code> for days. For example, <code>"+1m +7d"</code> represents one month and seven days from today.</desc>
			</type>
		</option>
		<option name="monthNames" type="Array" default="[ &quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;, &quot;November&quot;, &quot;December&quot; ]" example-value="[ &quot;Januar&quot;, &quot;Februar&quot;, &quot;Marts&quot;, &quot;April&quot;, &quot;Maj&quot;, &quot;Juni&quot;, &quot;Juli&quot;, &quot;August&quot;, &quot;September&quot;, &quot;Oktober&quot;, &quot;November&quot;, &quot;December&quot; ]">
			<desc>The list of full month names, for use as requested via the <a href="#option-dateFormat"><code>dateFormat</code></a> option.</desc>
		</option>
		<option name="monthNamesShort" type="Array" default="[ &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot; ]" example-value="[ &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;Maj&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Okt&quot;, &quot;Nov&quot;, &quot;Dec&quot; ]">
			<desc>The list of abbreviated month names, as used in the month header on each datepicker and as requested via the <a href="#option-dateFormat"><code>dateFormat</code></a> option.</desc>
		</option>
		<option name="navigationAsDateFormat" type="Boolean" default="false" example-value="true">
			<desc>Whether the <a href="#option-prevText"><code>prevText</code></a> and <a href="#option-nextText"><code>nextText</code></a> options should be parsed as dates by the <code><a href="#utility-formatDate"><code>formatDate</code></a></code> function, allowing them to display the target month names for example.</desc>
		</option>
		<option name="nextText" type="String" default="&quot;Next&quot;" example-value="&quot;Later&quot;">
			<desc>The text to display for the next month link. With the standard ThemeRoller styling, this value is replaced by an icon.</desc>
		</option>
		<option name="numberOfMonths" default="1" example-value="[ 2, 3 ]">
			<desc>The number of months to show at once.</desc>
			<type name="Number">
				<desc>The number of months to display in a single row.</desc>
			</type>
			<type name="Array">
				<desc>An array defining the number of rows and columns to display.</desc>
			</type>
		</option>
		<option name="prevText" type="String" default="&quot;Prev&quot;" example-value="&quot;Earlier&quot;">
			<desc>The text to display for the previous month link. With the standard ThemeRoller styling, this value is replaced by an icon.</desc>
		</option>
		<option name="selectOtherMonths" type="Boolean" default="false" example-value="true">
			<desc>Whether days in other months shown before or after the current month are selectable. This only applies if the <a href="#option-showOtherMonths"><code>showOtherMonths</code></a> option is set to <code>true</code>.</desc>
		</option>
		<option name="shortYearCutoff" default="&quot;+10&quot;" example-value="50">
			<desc>The cutoff year for determining the century for a date (used in conjunction with <a href="#option-dateFormat"><code>dateFormat</code></a> 'y'). Any dates entered with a year value less than or equal to the cutoff year are considered to be in the current century, while those greater than it are deemed to be in the previous century.</desc>
			<type name="Number">
				<desc>A value between <code>0</code> and <code>99</code> indicating the cutoff year.</desc>
			</type>
			<type name="String">
				<desc>A relative number of years from the current year, e.g., <code>"+3"</code> or <code>"-5"</code>.</desc>
			</type>
		</option>
		<option name="showAnim" type="String" default="&quot;show&quot;" example-value="&quot;fold&quot;">
			<desc>The name of the animation used to show and hide the datepicker. Use <code>"show"</code> (the default), <code>"slideDown"</code>, <code>"fadeIn"</code>, any of the <a href="/category/effects/">jQuery UI effects</a>. Set to an empty string to disable animation.</desc>
		</option>
		<option name="showButtonPanel" type="Boolean" default="false" example-value="true">
			<desc>Whether to show the button panel.</desc>
		</option>
		<option name="showCurrentAtPos" type="Number" default="0" example-value="3">
			<desc>When displaying multiple months via the <a href="#option-numberOfMonths"><code>numberOfMonths</code></a> option, the <code>showCurrentAtPos</code> option defines which position to display the current month in.</desc>
		</option>
		<option name="showMonthAfterYear" type="Boolean" default="false" example-value="true">
			<desc>Whether to show the month after the year in the header.</desc>
		</option>
		<option name="showOn" type="String" default="&quot;focus&quot;" example-value="&quot;both&quot;">
			<desc>When the datepicker should appear. The datepicker can appear when the field receives focus (<code>"focus"</code>), when a button is clicked (<code>"button"</code>), or when either event occurs (<code>"both"</code>).</desc>
		</option>
		<option name="showOptions" type="Object" default="{}" example-value="{ direction: &quot;up&quot; }">
			<desc>If using one of the jQuery UI effects for the <a href="#option-showAnim"><code>showAnim</code></a> option, you can provide additional settings for that animation via this option.</desc>
		</option>
		<option name="showOtherMonths" type="Boolean" default="false" example-value="true">
			<desc>Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the <a href="#option-selectOtherMonths"><code>selectOtherMonths</code></a> option.</desc>
		</option>
		<option name="showWeek" type="Boolean" default="false" example-value="true">
			<desc>When <code>true</code>, a column is added to show the week of the year. The <a href="#option-calculateWeek"><code>calculateWeek</code></a> option determines how the week of the year is calculated. You may also want to change the <a href="#option-firstDay"><code>firstDay</code></a> option.</desc>
		</option>
		<option name="stepMonths" type="Number" default="1" example-value="3">
			<desc>Set how many months to move when clicking the previous/next links.</desc>
		</option>
		<option name="weekHeader" type="String" default="&quot;Wk&quot;" example-value="&quot;W&quot;">
			<desc>The text to display for the week of the year column heading. Use the <a href="#option-showWeek"><code>showWeek</code></a> option to display this column.</desc>
		</option>
		<option name="yearRange" type="String" default="&quot;c-10:c+10&quot;" example-value="&quot;2002:2012&quot;">
			<desc>The range of years displayed in the year drop-down: either relative to today's year (<code>"-nn:+nn"</code>), relative to the currently selected year (<code>"c-nn:c+nn"</code>), absolute (<code>"nnnn:nnnn"</code>), or combinations of these formats (<code>"nnnn:-nn"</code>). Note that this option only affects what appears in the drop-down, to restrict which dates may be selected use the <a href="#option-minDate"><code>minDate</code></a> and/or <a href="#option-maxDate"><code>maxDate</code></a> options.</desc>
		</option>
		<option name="yearSuffix" type="String" default="&quot;&quot;" example-value="&quot;CE&quot;">
			<desc>Additional text to display after the year in the month headers.</desc>
		</option>

		
		<option name="beforeShow" type="Function" default="null">
			<argument name="input" type="Element"/>
			<argument name="inst" type="Object"/>
			<desc>A function that takes an input field and current datepicker instance and returns an options object to update the datepicker with. It is called just before the datepicker is displayed.</desc>
		</option>
		<option name="beforeShowDay" type="Function" default="null">
			<argument name="date" type="Date"/>
			<desc>A function takes a date as a parameter and must return an array with <code>[0]</code> equal to <code>true</code>/<code>false</code> indicating whether or not this date is selectable, <code>[1]</code> equal to a CSS class name or <code>""</code> for the default presentation, and <code>[2]</code> an optional popup tooltip for this date. It is called for each day in the datepicker before it is displayed.</desc>
		</option>
		<option name="onChangeMonthYear" type="Function" default="null">
			<argument name="year" type="Integer"/>
			<argument name="month" type="Integer"/>
			<argument name="inst" type="Object"/>
			<desc>Called when the datepicker moves to a new month and/or year. The function receives the selected year, month (1-12), and the datepicker instance as parameters. <code>this</code> refers to the associated input field.</desc>
		</option>
		<option name="onClose" type="Function" default="null">
			<argument name="dateText" type="String"/>
			<argument name="inst" type="Object"/>
			<desc>Called when the datepicker is closed, whether or not a date is selected. The function receives the selected date as text (<code>""</code> if none) and the datepicker instance as parameters. <code>this</code> refers to the associated input field.</desc>
		</option>
		<option name="onSelect" type="Function" default="null">
			<argument name="dateText" type="String"/>
			<argument name="inst" type="Object"/>
			<desc>Called when the datepicker is selected. The function receives the selected date as text and the datepicker instance as parameters. <code>this</code> refers to the associated input field.</desc>
		</option>
	</options>
	<methods>
		<method name="destroy">
	<desc>
		Removes the datepicker functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="dialog" example-params="&quot;10/12/2012&quot;">
			<desc>Opens the datepicker in a dialog box.</desc>
			<argument name="date">
				<desc>The initial date.</desc>
				<type name="String"/>
				<type name="Date"/>
			</argument>
			<argument name="onSelect" type="Function" optional="true">
				<desc>A callback function when a date is selected. The function receives the date text and date picker instance as parameters.</desc>
			</argument>
			<argument name="settings" type="Options" optional="true">
				<desc>The new settings for the date picker.</desc>
			</argument>
			<argument name="pos" type="Number[2] or MouseEvent" optional="true">
				<desc>The position of the top/left of the dialog as <code>[x, y]</code> or a <code>MouseEvent</code> that contains the coordinates. If not specified the dialog is centered on the screen.</desc>
			</argument>
		</method>
		<method name="isDisabled" return="Boolean" example-return-var="isDisabled">
			<desc>Determine whether a date picker has been disabled.</desc>
		</method>
		<method name="hide">
			<desc>Close a previously opened date picker.</desc>
		</method>
		<method name="show">
			<desc>Open the date picker. If the datepicker is attached to an input, the input must be visible for the datepicker to be shown.</desc>
		</method>
		<method name="refresh">
			<desc>Redraw the date picker, after having made some external modifications.</desc>
		</method>
		<method name="getDate" return="Date" example-return-var="currentDate">
			<desc>Returns the current date for the datepicker or <code>null</code> if no date has been selected.</desc>
		</method>
		<method name="setDate" example-params="&quot;10/12/2012&quot;">
			<desc>Sets the date for the datepicker. The new date may be a <code>Date</code> object or a string in the current <a href="#option-dateFormat">date format</a> (e.g., <code>"01/26/2009"</code>), a number of days from today (e.g., <code>+7</code>) or a string of values and periods (<code>"y"</code> for years, <code>"m"</code> for months, <code>"w"</code> for weeks, <code>"d"</code> for days, e.g., <code>"+1m +7d"</code>), or <code>null</code> to clear the selected date.</desc>
			<argument name="date">
				<desc>The new date.</desc>
				<type name="String"/>
				<type name="Date"/>
			</argument>
		</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the datepicker.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current datepicker options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the datepicker option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the datepicker.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the datepicker.
	</desc>
</method>
	</methods>
	<example>
		<height>300</height>
		<desc>A simple jQuery UI Datepicker.</desc>
		<code>
$( "#datepicker" ).datepicker();
</code>
		<html>
&lt;div id="datepicker"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="dialog" type="widget" widget-element="generated wrapper">
	<title>Dialog Widget</title>
	<desc>Open content in an interactive overlay.</desc>
	<longdesc>
		<p>A dialog is a floating window that contains a title bar and a content area. The dialog window can be moved, resized and closed with the 'x' icon by default.</p>

		<p>If the content length exceeds the maximum height, a scrollbar will automatically appear.</p>

		<p>A bottom button bar and semi-transparent modal overlay layer are common options that can be added.</p>

		<h3>Hiding the close button</h3>

		<p>In some cases, you may want to hide the close button, for instance, if you have a close button in the button pane. The best way to accomplish this is via CSS. As an example, you can define a simple rule, such as:</p>

		<pre><code>
			.no-close .ui-dialog-titlebar-close {
				display: none;
			}
		</code></pre>

		<p>Then, you can simply add the <code>no-close</code> class to any dialog in order to hide it's close button:</p>

		<pre><code>
			$( "#dialog" ).dialog({
				dialogClass: "no-close",
				buttons: [
					{
						text: "OK",
						click: function() {
							$( this ).dialog( "close" );
						}
					}
				]
			});
		</code></pre>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/position/">Position</a></li>
			<li><a href="/button/">Button</a></li>
			<li><a href="/draggable/">Draggable</a> (optional; for use with the <a href="#option-draggable"><code>draggable</code></a> option)</li>
			<li><a href="/resizable/">Resizable</a> (optional; for use with the <a href="#option-resizable"><code>resizable</code></a> option)</li>
			<li><a href="/category/effects-core/">Effects Core</a> (optional; for use with the <a href="#option-show"><code>show</code></a> and <a href="#option-hide"><code>hide</code></a> options)</li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.0</added>
	<options>
		<option name="appendTo" type="Selector" default="&quot;body&quot;" example-value="&quot;#someElem&quot;" added="1.10.0">
			<desc>Which element the dialog (and overlay, if <a href="#option-modal">modal</a>) should be appended to.</desc>
		</option>
		<option name="autoOpen" default="true" example-value="false">
			<desc>If set to <code>true</code>, the dialog will automatically open upon initialization. If <code>false</code>, the dialog will stay hidden until the <a href="#method-open"><code>open()</code></a> method is called.</desc>
			<type name="Boolean"/>
		</option>
		<option name="buttons" default="{}" example-value="[ { text: &quot;Ok&quot;, click: function() { $( this ).dialog( &quot;close&quot; ); } } ]">
			<desc>Specifies which buttons should be displayed on the dialog. The context of the callback is the dialog element; if you need access to the button, it is available as the target of the event object.</desc>
			<type name="Object">
				<desc>The keys are the button labels and the values are the callbacks for when the associated button is clicked.</desc>
			</type>
			<type name="Array">
				<desc>Each element of the array must be an object defining the attributes, properties, and event handlers to set on the button.</desc>
			</type>
		</option>
		<option name="closeOnEscape" default="true" example-value="false">
			<desc>Specifies whether the dialog should close when it has focus and the user presses the esacpe (ESC) key.</desc>
			<type name="Boolean"/>
		</option>
		<option name="closeText" default="&quot;close&quot;" example-value="&quot;hide&quot;">
			<desc>Specifies the text for the close button. Note that the close text is visibly hidden when using a standard theme.</desc>
			<type name="String"/>
		</option>
		<option name="dialogClass" default="&quot;&quot;" example-value="&quot;alert&quot;">
			<desc>The specified class name(s) will be added to the dialog, for additional theming.</desc>
			<type name="String"/>
		</option>
		<option name="draggable" default="true" example-value="false">
			<desc>If set to <code>true</code>, the dialog will be draggable by the title bar. Requires the <a href="/draggable/">jQuery UI Draggable widget</a> to be included.</desc>
			<type name="Boolean"/>
		</option>
		<option name="height" default="&quot;auto&quot;" example-value="400">
			<desc>The height of the dialog.</desc>
			<type name="Number">
				<desc>The height in pixels.</desc>
			</type>
			<type name="String">
				<desc>The only supported string value is <code>"auto"</code> which will allow the dialog height to adjust based on its content.</desc>
			</type>
		</option>
		<option name="hide" default="null" example-value="&quot;explode&quot;">
			<desc>If and how to animate the hiding of the dialog.</desc>
			<type name="Number">
				<desc>
					The dialog will fade out while animating the height and width for the specified duration.
				</desc>
			</type>
			<type name="String">
				<desc>
					The dialog will be hidden using the specified jQuery UI effect. See the <a href="/category/effects/">list of effects</a> for possible values.
				</desc>
			</type>
			<type name="Object">
				<desc>If the value is an object, then <code>effect</code>, <code>delay</code>, <code>duration</code>, and <code>easing</code> properties may be provided. The <code>effect</code> property must be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If <code>duration</code> or <code>easing</code> is omitted, then the default values will be used. If <code>delay</code> is omitted, then no delay is used.</desc>
			</type>
		</option>
		<option name="maxHeight" default="false" example-value="600">
			<desc>The maximum height to which the dialog can be resized, in pixels.</desc>
			<type name="Number"/>
		</option>
		<option name="maxWidth" default="false" example-value="600">
			<desc>The maximum width to which the dialog can be resized, in pixels.</desc>
			<type name="Number"/>
		</option>
		<option name="minHeight" default="150" example-value="200">
			<desc>The minimum height to which the dialog can be resized, in pixels.</desc>
			<type name="Number"/>
		</option>
		<option name="minWidth" default="150" example-value="200">
			<desc>The minimum width to which the dialog can be resized, in pixels.</desc>
			<type name="Number"/>
		</option>
		<option name="modal" default="false" example-value="true">
			<desc>If set to <code>true</code>, the dialog will have modal behavior; other items on the page will be disabled, i.e., cannot be interacted with. Modal dialogs create an overlay below the dialog but above other page elements.</desc>
			<type name="Boolean"/>
		</option>
		<option name="position" default="{ my: &quot;center&quot;, at: &quot;center&quot;, of: window }" example-value="{ my: &quot;left top&quot;, at: &quot;left bottom&quot;, of: button }">
			<desc>
				<p>Specifies where the dialog should be displayed. The dialog will handle collisions such that as much of the dialog is visible as possible.</p>
				<p><em>Note: The <code>String</code> and <code>Array</code> forms are deprecated.</em></p>
			</desc>
			<type name="Object">
				<desc>Identifies the position of the dialog when opened. The <code>of</code> option defaults to the window, but you can specify another element to position against. You can refer to the <a href="/position">jQuery UI Position</a> utility for more details about the various options.</desc>
			</type>
			<type name="String">
				<desc>A string representing the position within the viewport. Possible values: <code>"center"</code>, <code>"left"</code>, <code>"right"</code>, <code>"top"</code>, <code>"bottom"</code>.</desc>
			</type>
			<type name="Array">
				<desc>An array containing an <em>x, y</em> coordinate pair in pixel offset from the top left corner of the viewport or the name of a possible string value.</desc>
			</type>
		</option>
		<option name="resizable" default="true" example-value="false">
			<desc>If set to <code>true</code>, the dialog will be resizable. Requires the <a href="/resizable/">jQuery UI Resizable widget</a> to be included.</desc>
			<type name="Boolean"/>
		</option>
		<option name="show" default="null" example-value="&quot;slow&quot;">
			<desc>If and how to animate the showing of the dialog.</desc>
			<type name="Number">
				<desc>
					The dialog will fade in while animating the height and width for the specified duration.
				</desc>
			</type>
			<type name="String">
				<desc>
					The dialog will be shown using the specified jQuery UI effect. See the <a href="/category/effects/">list of effects</a> for possible values.
				</desc>
			</type>
			<type name="Object">
				<desc>If the value is an object, then <code>effect</code>, <code>delay</code>, <code>duration</code>, and <code>easing</code> properties may be provided. The <code>effect</code> property must be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If <code>duration</code> or <code>easing</code> is omitted, then the default values will be used. If <code>delay</code> is omitted, then no delay is used.</desc>
			</type>
		</option>
		<option name="title" default="null" example-value="&quot;Dialog Title&quot;">
			<desc>Specifies the title of the dialog. If the value is <code>null</code>, the <code>title</code> attribute on the dialog source element will be used.</desc>
			<type name="String"/>
		</option>
		<option name="width" default="300" example-value="500">
			<desc>The width of the dialog, in pixels.</desc>
			<type name="Number"/>
		</option>
	</options>
	<events>
		<event name="beforeClose">
			<desc>Triggered when a dialog is about to close. If canceled, the dialog will not close.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="create">
	<desc>
		Triggered when the dialog is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="open">
			<desc>Triggered when the dialog is opened.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="focus">
			<desc>Triggered when the dialog gains focus.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="dragStart">
			<desc>Triggered when the user starts dragging the dialog.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="position" type="Object">
					<desc>The current CSS position of the dialog.</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current offset position of the dialog.</desc>
				</property>
			</argument>
		</event>
		<event name="drag">
			<desc>Triggered while the dialog is being dragged.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="position" type="Object">
					<desc>The current CSS position of the dialog.</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current offset position of the dialog.</desc>
				</property>
			</argument>
		</event>
		<event name="dragStop">
			<desc>Triggered after the dialog has been dragged.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="position" type="Object">
					<desc>The current CSS position of the dialog.</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current offset position of the dialog.</desc>
				</property>
			</argument>
		</event>
		<event name="resizeStart">
			<desc>Triggered when the user starts resizing the dialog.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="originalPosition" type="Object">
					<desc>The CSS position of the dialog prior to being resized.</desc>
				</property>
				<property name="position" type="Object">
					<desc>The current CSS position of the dialog.</desc>
				</property>
				<property name="originalSize" type="Object">
					<desc>The size of the dialog prior to being resized.</desc>
				</property>
				<property name="size" type="Object">
					<desc>The current size of the dialog.</desc>
				</property>
			</argument>
		</event>
		<event name="resize">
			<desc>Triggered while the dialog is being resized.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="originalPosition" type="Object">
					<desc>The CSS position of the dialog prior to being resized.</desc>
				</property>
				<property name="position" type="Object">
					<desc>The current CSS position of the dialog.</desc>
				</property>
				<property name="originalSize" type="Object">
					<desc>The size of the dialog prior to being resized.</desc>
				</property>
				<property name="size" type="Object">
					<desc>The current size of the dialog.</desc>
				</property>
			</argument>
		</event>
		<event name="resizeStop">
			<desc>Triggered after the dialog has been resized.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="originalPosition" type="Object">
					<desc>The CSS position of the dialog prior to being resized.</desc>
				</property>
				<property name="position" type="Object">
					<desc>The current CSS position of the dialog.</desc>
				</property>
				<property name="originalSize" type="Object">
					<desc>The size of the dialog prior to being resized.</desc>
				</property>
				<property name="size" type="Object">
					<desc>The current size of the dialog.</desc>
				</property>
			</argument>
		</event>
		<event name="close">
			<desc>Triggered when the dialog is closed.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
	</events>
	<methods>
		<method name="close">
			<desc>Closes the dialog.</desc>
		</method>
		<method name="destroy">
	<desc>
		Removes the dialog functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="isOpen" return="Boolean" example-return-var="isOpen">
			<desc>Whether the dialog is currently open.</desc>
		</method>
		<method name="moveToTop">
			<desc>Moves the dialog to the top of the dialog stack.</desc>
		</method>
		<method name="open">
			<desc>Opens the dialog.</desc>
		</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the dialog.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current dialog options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the dialog option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the dialog.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the generated wrapper.
	</desc>
</method>
	</methods>
	<example>
		<desc>A simple jQuery UI Dialog</desc>
		<code>
$( "#dialog" ).dialog({ autoOpen: false });
$( "#opener" ).click(function() {
	$( "#dialog" ).dialog( "open" );
});
</code>
		<html>
&lt;button id="opener"&gt;open the dialog&lt;/button&gt;
&lt;div id="dialog" title="Dialog Title"&gt;I'm a dialog&lt;/div&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry type="method" name="disableSelection" return="jQuery">
	<title>.disableSelection()</title>
	<desc>Disable selection of text content within the set of matched elements.</desc>
	<signature added="1.6" deprecated="1.9"/>
	<longdesc>
		<p>Disabling text selection is bad. Don't use this.</p>
	</longdesc>
	<category slug="methods"/>
	<category slug="ui-core"/>
</entry><entry name="draggable" type="widget" widget-element="draggable element" event-prefix="drag">
	<title>Draggable Widget</title>
	<desc>Allow elements to be moved using the mouse.</desc>
	<longdesc>
		<p>Make the selected elements draggable by mouse. If you want not just drag, but drag &amp; drop, see the <a href="/droppable/">jQuery UI Droppable plugin</a>, which provides a drop target for draggables.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/mouse/">Mouse Interaction</a></li>
		</ul>
	</longdesc>
	<added>1.0</added>
	<options>
		<option name="addClasses" type="Boolean" default="true" example-value="false">
			<desc>If set to <code>false</code>, will prevent the <code>ui-draggable</code> class from being added. This may be desired as a performance optimization when calling <code>.draggable()</code> on hundreds of elements.</desc>
		</option>
		<option name="appendTo" default="&quot;parent&quot;" example-value="&quot;body&quot;">
			<desc>Which element the draggable helper should be appended to while dragging.</desc>
			<type name="jQuery">
				<desc>A jQuery object containing the element to append the helper to.</desc>
			</type>
			<type name="Element">
				<desc>The element to append the helper to.</desc>
			</type>
			<type name="Selector">
				<desc>A selector specifying which element to append the helper to.</desc>
			</type>
			<type name="String">
				<desc>The string <code>"parent"</code> will cause the helper to be a sibling of the draggable.</desc>
			</type>
		</option>
		<option name="axis" type="String" default="false" example-value="&quot;x&quot;">
			<desc>Constrains dragging to either the horizontal (x) or vertical (y) axis. Possible values: <code>"x"</code>, <code>"y"</code>.</desc>
		</option>
		<option name="cancel" type="Selector" default="&quot;input,textarea,button,select,option&quot;" example-value="&quot;.title&quot;">
			<desc>Prevents dragging from starting on specified elements.</desc>
		</option>
		<option name="connectToSortable" type="Selector" default="false" example-value="&quot;#my-sortable&quot;">
			<desc>Allows the draggable to be dropped onto the specified sortables. If this option is used, a draggable can be dropped onto a sortable list and then becomes part of it. Note: The <a href="#option-helper"><code>helper</code></a> option must be set to <code>"clone"</code> in order to work flawlessly. Requires the <a href="/sortable/">jQuery UI Sortable plugin</a> to be included.</desc>
		</option>
		<option name="containment" default="false" example-value="&quot;parent&quot;">
			<desc>Constrains dragging to within the bounds of the specified element or region.</desc>
			<type name="Selector">
				<desc>The draggable element will be contained to the bounding box of the first element found by the selector. If no element is found, no containment will be set.</desc>
			</type>
			<type name="Element">
				<desc>The draggable element will be contained to the bounding box of this element.</desc>
			</type>
			<type name="String">
				<desc>Possible values: <code>"parent"</code>, <code>"document"</code>, <code>"window"</code>.</desc>
			</type>
			<type name="Array">
				<desc>An array defining a bounding box in the form <code>[ x1, y1, x2, y2 ]</code>.</desc>
			</type>
		</option>
		<option name="cursor" type="String" default="&quot;auto&quot;" example-value="&quot;crosshair&quot;">
			<desc>The CSS cursor during the drag operation.</desc>
		</option>
		<option name="cursorAt" type="Object" default="false" example-value="{ left: 5 }">
			<desc>Sets the offset of the dragging helper relative to the mouse cursor. Coordinates can be given as a hash using a combination of one or two keys: <code>{ top, left, right, bottom }</code>.</desc>
		</option>
		<option name="delay" type="Number" default="0" example-value="300">
			<desc>Time in milliseconds after mousedown until dragging should start. This option can be used to prevent unwanted drags when clicking on an element.</desc>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the draggable if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="distance" type="Number" default="1" example-value="10">
			<desc>Distance in pixels after mousedown the mouse must move before dragging should start. This option can be used to prevent unwanted drags when clicking on an element.</desc>
		</option>
		<option name="grid" type="Array" default="false" example-value="[ 50, 20 ]">
			<desc>Snaps the dragging helper to a grid, every x and y pixels. The array must be of the form <code>[ x, y ]</code>.</desc>
		</option>
		<option name="handle" default="false" example-value="&quot;h2&quot;">
			<desc>If specified, restricts dragging from starting unless the mousedown occurs on the specified element(s).</desc>
			<type name="Selector"/>
			<type name="Element"/>
		</option>
		<option name="helper" default="&quot;original&quot;" example-value="&quot;clone&quot;">
			<desc>Allows for a helper element to be used for dragging display.</desc>
			<type name="String">
				<desc>If set to <code>"clone"</code>, then the element will be cloned and the clone will be dragged.</desc>
			</type>
			<type name="Function">
				<desc>A function that will return a DOMElement to use while dragging.</desc>
			</type>
		</option>
		<option name="iframeFix" default="false" example-value="true">
			<desc>Prevent iframes from capturing the mousemove events during a drag. Useful in combination with the <a href="#option-cursorAt"><code>cursorAt</code></a> option, or in any case where the mouse cursor may not be over the helper.</desc>
			<type name="Boolean">
				<desc>When set to <code>true</code>, transparent overlays will be placed over all iframes on the page.</desc>
			</type>
			<type name="Selector">
				<desc>Any iframes matching the selector will be covered by transparent overlays.</desc>
			</type>
		</option>
		<option name="opacity" type="Number" default="false" example-value="0.35">
			<desc>Opacity for the helper while being dragged.</desc>
		</option>
		<option name="refreshPositions" type="Boolean" default="false" example-value="true">
			<desc>
				If set to <code>true</code>, all droppable positions are calculated on every mousemove.
				<em>Caution: This solves issues on highly dynamic pages, but dramatically decreases performance.</em>
			</desc>
		</option>
		<option name="revert" default="false" example-value="true">
			<desc>Whether the element should revert to its start position when dragging stops.</desc>
			<type name="Boolean">
				<desc>If set to <code>true</code> the element will always revert.</desc>
			</type>
			<type name="String">
				<desc>If set to <code>"invalid"</code>, revert will only occur if the draggable has not been dropped on a droppable. For <code>"valid"</code>, it's the other way around.</desc>
			</type>
		</option>
		<option name="revertDuration" type="Number" default="500" example-value="200">
			<desc>The duration of the revert animation, in milliseconds. Ignored if the <a href="#option-revert"><code>revert</code></a> option is <code>false</code>.</desc>
		</option>
		<option name="scope" type="String" default="&quot;default&quot;" example-value="&quot;tasks&quot;">
			<desc>Used to group sets of draggable and droppable items, in addition to droppable's <a href="/droppable#option-accept"><code>accept</code></a> option. A draggable with the same <code>scope</code> value as a droppable will be accepted by the droppable.</desc>
		</option>
		<option name="scroll" type="Boolean" default="true" example-value="false">
			<desc>If set to <code>true</code>, container auto-scrolls while dragging.</desc>
		</option>
		<option name="scrollSensitivity" type="Number" default="20" example-value="100">
			<desc>Distance in pixels from the edge of the viewport after which the viewport should scroll. Distance is relative to pointer, not the draggable. Ignored if the <a href="#option-scroll"><code>scroll</code></a> option is <code>false</code>.</desc>
		</option>
		<option name="scrollSpeed" type="Number" default="20" example-value="100">
			<desc>The speed at which the window should scroll once the mouse pointer gets within the <a href="#option-scrollSensitivity"><code>scrollSensitivity</code></a> distance. Ignored if the <a href="#option-scroll"><code>scroll</code></a> option is <code>false</code>.</desc>
		</option>
		<option name="snap" default="false" example-value="true">
			<desc>Whether the element should snap to other elements.</desc>
			<type name="Boolean">
				<desc>When set to <code>true</code>, the element will snap to all other draggable elements.</desc>
			</type>
			<type name="Selector">
				<desc>A selector specifying which elements to snap to.</desc>
			</type>
		</option>
		<option name="snapMode" type="String" default="&quot;both&quot;" example-value="&quot;inner&quot;">
			<desc>Determines which edges of snap elements the draggable will snap to. Ignored if the <a href="#option-snap"><code>snap</code></a> option is <code>false</code>. Possible values: <code>"inner"</code>, <code>"outer"</code>, <code>"both"</code>.</desc>
		</option>
		<option name="snapTolerance" type="Number" default="20" example-value="30">
			<desc>The distance in pixels from the snap element edges at which snapping should occur. Ignored if the <a href="#option-snap"><code>snap</code></a> option is <code>false</code>.</desc>
		</option>
		<option name="stack" type="Selector" default="false" example-value="&quot;.products&quot;">
			<desc>Controls the z-index of the set of elements that match the selector, always brings the currently dragged item to the front. Very useful in things like window managers.</desc>
		</option>
		<option name="zIndex" type="Number" default="false" example-value="100">
			<desc>Z-index for the helper while being dragged.</desc>
		</option>
	</options>
	<events>
		<event name="create">
	<desc>
		Triggered when the draggable is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="start">
			<desc>Triggered when dragging starts.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper that's being dragged.</desc>
				</property>
				<property name="position" type="Object">
					<desc>Current CSS position of the helper as <code>{ top, left }</code> object.</desc>
				</property>
				<property name="offset" type="Object">
					<desc>Current offset position of the helper as <code>{ top, left }</code> object.</desc>
				</property>
			</argument>
		</event>
		<event name="drag">
			<desc>Triggered while the mouse is moved during the dragging.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper that's being dragged.</desc>
				</property>
				<property name="position" type="Object">
					<desc>Current CSS position of the helper as <code>{ top, left }</code> object.</desc>
				</property>
				<property name="offset" type="Object">
					<desc>Current offset position of the helper as <code>{ top, left }</code> object.</desc>
				</property>
			</argument>
		</event>
		<event name="stop">
			<desc>Triggered when dragging stops.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper that's being dragged.</desc>
				</property>
				<property name="position" type="Object">
					<desc>Current CSS position of the helper as <code>{ top, left }</code> object.</desc>
				</property>
				<property name="offset" type="Object">
					<desc>Current offset position of the helper as <code>{ top, left }</code> object.</desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="destroy">
	<desc>
		Removes the draggable functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the draggable.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the draggable.
	</desc>
</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the draggable.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current draggable options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the draggable option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the draggable.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the draggable element.
	</desc>
</method>
	</methods>
	<example>
		<desc>A simple jQuery UI Draggable</desc>
		<css>
	#draggable {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( "#draggable" ).draggable();
</code>
		<html>
&lt;div id="draggable"&gt;Drag me&lt;/div&gt;
</html>
	</example>
	<category slug="interactions"/>
</entry><entry name="drop" type="effect">
	<title>Drop Effect</title>
	<desc>
		The drop effect hides or shows an element fading in/out and sliding in a direction.
	</desc>
	<arguments>
		<argument name="direction" type="String" default="&quot;left&quot;">
			<desc>
				<p>The direction the element will fall to hide the element, or the direction from which the element will be revealed.</p>
				<p>Possible Values: <code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>.</p>
			</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the drop effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "drop" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="droppable" type="widget" widget-element="droppable element" event-prefix="drop">
	<title>Droppable Widget</title>
	<desc>Create targets for draggable elements.</desc>
	<longdesc>
		<p>The jQuery UI Droppable plugin makes selected elements droppable (meaning they accept being dropped on by <a href="/draggable/">draggables</a>). You can specify which draggables each will accept.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/mouse/">Mouse Interaction</a></li>
		</ul>
	</longdesc>
	<added>1.0</added>
	<options>
		<option name="accept" default="&quot;*&quot;" example-value="&quot;.special&quot;">
			<desc>Controls which draggable elements are accepted by the droppable.</desc>
			<type name="Selector">
				<desc>A selector indicating which draggable elements are accepted.</desc>
			</type>
			<type name="Function">
				<desc>A function that will be called for each draggable on the page (passed as the first argument to the function). The function must return <code>true</code> if the draggable should be accepted.</desc>
			</type>
		</option>
		<option name="activeClass" type="String" default="false" example-value="&quot;ui-state-highlight&quot;">
			<desc>If specified, the class will be added to the droppable while an acceptable draggable is being dragged.</desc>
		</option>
		<option name="addClasses" type="Boolean" default="true" example-value="false">
			<desc>If set to <code>false</code>, will prevent the <code>ui-droppable</code> class from being added. This may be desired as a performance optimization when calling <code>.droppable()</code> init on hundreds of elements.</desc>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the droppable if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="greedy" type="Boolean" default="false" example-value="true">
			<desc>By default, when an element is dropped on nested droppables, each droppable will receive the element. However, by setting this option to <code>true</code>, any parent droppables will not receive the element.</desc>
		</option>
		<option name="hoverClass" type="String" default="false" example-value="&quot;drop-hover&quot;">
			<desc>If specified, the class will be added to the droppable while an acceptable draggable is being hovered over the droppable.</desc>
		</option>
		<option name="scope" type="String" default="&quot;default&quot;" example-value="&quot;tasks&quot;">
			<desc>Used to group sets of draggable and droppable items, in addition to the <a href="#option-accept"><code>accept</code></a> option. A draggable with the same scope value as a droppable will be accepted.</desc>
		</option>
		<option name="tolerance" type="String" default="&quot;intersect&quot;" example-value="&quot;fit&quot;">
			<desc>
				Specifies which mode to use for testing whether a draggable is hovering over a droppable. Possible values:
				<ul>
					<li><code>"fit"</code>: Draggable overlaps the droppable entirely.</li>
					<li><code>"intersect"</code>: Draggable overlaps the droppable at least 50% in both directions.</li>
					<li><code>"pointer"</code>: Mouse pointer overlaps the droppable.</li>
					<li><code>"touch"</code>: Draggable overlaps the droppable any amount.</li>
				</ul>
			</desc>
		</option>
	</options>
	<events>
		<event name="create">
	<desc>
		Triggered when the droppable is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="activate">
			<desc>Triggered when an accepted draggable starts dragging. This can be useful if you want to make the droppable "light up" when it can be dropped on.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="draggable" type="jQuery">
				  <desc>A jQuery object representing the draggable element.</desc>
				</property>
				<property name="helper" type="jQuery">
				  <desc>A jQuery object representing the helper that is being dragged.</desc>
				</property>
				<property name="position" type="Object">
				  <desc>Current CSS position of the draggable helper as <code>{ top, left }</code> object.</desc>
				</property>
				<property name="offset" type="Object">
				  <desc>Current offset position of the draggable helper as <code>{ top, left }</code> object.</desc>
				</property>
			</argument>
		</event>
		<event name="deactivate">
			<desc>Triggered when an accepted draggable stops dragging.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="draggable" type="jQuery">
				  <desc>A jQuery object representing the draggable element.</desc>
				</property>
				<property name="helper" type="jQuery">
				  <desc>A jQuery object representing the helper that is being dragged.</desc>
				</property>
				<property name="position" type="Object">
				  <desc>Current CSS position of the draggable helper as <code>{ top, left }</code> object.</desc>
				</property>
				<property name="offset" type="Object">
				  <desc>Current offset position of the draggable helper as <code>{ top, left }</code> object.</desc>
				</property>
			</argument>
		</event>
		<event name="over">
			<desc>Triggered when an accepted draggable is dragged over the droppable (based on the<a href="#option-tolerance"><code>tolerance</code></a> option).</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="draggable" type="jQuery">
				  <desc>A jQuery object representing the draggable element.</desc>
				</property>
				<property name="helper" type="jQuery">
				  <desc>A jQuery object representing the helper that is being dragged.</desc>
				</property>
				<property name="position" type="Object">
				  <desc>Current CSS position of the draggable helper as <code>{ top, left }</code> object.</desc>
				</property>
				<property name="offset" type="Object">
				  <desc>Current offset position of the draggable helper as <code>{ top, left }</code> object.</desc>
				</property>
			</argument>
		</event>
		<event name="out">
			<desc>Triggered when an accepted draggable is dragged out of the droppable (based on the<a href="#option-tolerance"><code>tolerance</code></a> option).</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="drop">
			<desc>Triggered when an accepted draggable is dropped on the droppable (based on the<a href="#option-tolerance"><code>tolerance</code></a> option).</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="draggable" type="jQuery">
				  <desc>A jQuery object representing the draggable element.</desc>
				</property>
				<property name="helper" type="jQuery">
				  <desc>A jQuery object representing the helper that is being dragged.</desc>
				</property>
				<property name="position" type="Object">
				  <desc>Current CSS position of the draggable helper as <code>{ top, left }</code> object.</desc>
				</property>
				<property name="offset" type="Object">
				  <desc>Current offset position of the draggable helper as <code>{ top, left }</code> object.</desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="destroy">
	<desc>
		Removes the droppable functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the droppable.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the droppable.
	</desc>
</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the droppable.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current droppable options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the droppable option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the droppable.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the droppable element.
	</desc>
</method>
	</methods>
	<example>
		<desc>A pair of draggable and droppable elements.</desc>
		<css>
	#draggable {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
	#droppable {
		position: absolute;
		left: 250px;
		top: 0;
		width: 125px;
		height: 125px;
		background: #999;
		color: #fff;
		padding: 10px;
	}
</css>
		<code>
$( "#draggable" ).draggable();
$( "#droppable" ).droppable({
	drop: function() {
		alert( "dropped" );
	}
});
</code>
		<html>
&lt;div id="droppable"&gt;Drop here&lt;/div&gt;
&lt;div id="draggable"&gt;Drag me&lt;/div&gt;
</html>
	</example>
	<category slug="interactions"/>
</entry><entry name="effect" type="method" return="jQuery">
	<title>.effect()</title>
	<desc>Apply an animation effect to an element.</desc>
	<longdesc>
		<p>The <code>.effect()</code> method applies a named animation <a href="/category/effects/">effect</a> to an element. Many effects also support a show or hide mode, which can be accomplished with the <a href="/show/"><code>.show()</code></a>, <a href="/hide/"><code>.hide()</code></a>, and <a href="/toggle/"><code>.toggle()</code></a> methods.</p>
	</longdesc>
	<signature>
		<argument name="effect" type="String">
			<desc>A string indicating which <a href="/category/effects/">effect</a> to use for the transition.</desc>
		</argument>
		<argument name="options" type="Object" optional="true">
			<desc>Effect-specific settings and <a href="/easings/">easing</a>.</desc>
		</argument>
		<argument name="duration" default="400" optional="true">
	<desc>A string or number determining how long the animation will run.</desc>
	<type name="Number">
		<desc>The duration in milliseconds.</desc>
	</type>
	<type name="String">
		<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
	</type>
</argument>
		<argument name="complete" type="Function" optional="true">
	<desc>A function to call once the animation is complete.</desc>
</argument>
	</signature>
	<signature>
	<argument name="options" type="Object">
		<desc>All animation settings. The only required property is <code>effect</code>.</desc>
		<property name="effect" type="String">
			<desc>A string indicating which <a href="/category/effect/">effect</a> to use for the transition.</desc>
		</property>
		<property name="easing" type="String" default="&quot;swing&quot;">
			<desc>A string indicating which <a href="/easings/">easing</a> function to use for the transition.</desc>
		</property>
		<property name="duration" default="400">
			<desc>A string or number determining how long the animation will run.</desc>
			<type name="Number">
				<desc>The duration in milliseconds.</desc>
			</type>
			<type name="String">
				<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
			</type>
		</property>
		<property name="complete" type="Function">
			<desc>A function to call once the animation is complete.</desc>
		</property>
	</argument>
</signature>
	<example>
		<desc>Apply the bounce effect to a div.</desc>
		<css>
	div {
		width: 100px;
		height: 100px;
		background: #ccc;
		border: 1px solid #000;
	}
</css>
		<html>
&lt;p&gt;Click anywhere to apply the effect.&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
</html>
		<code>
$( document ).click(function() {
	$( "div" ).effect( "bounce", "slow" );
});
</code>
	</example>
	<category slug="methods"/>
	<category slug="effects"/>
	<category slug="effects-core"/>
</entry><entry type="method" name="enableSelection" return="jQuery">
	<title>.enableSelection()</title>
	<desc>Enable selection of text content within the set of matched elements.</desc>
	<signature added="1.6" deprecated="1.9"/>
	<longdesc>
		<p>The <code>.enableSelection()</code> method can be used to re-enable selection of text that was disabled via <a href="/disableSelection/"><code>.disableSelection()</code></a>.</p>
	</longdesc>
	<category slug="methods"/>
	<category slug="ui-core"/>
</entry><entry name="explode" type="effect">
	<title>Explode Effect</title>
	<desc>
		The explode effect hides or shows an element by splitting it into pieces.
	</desc>
	<arguments>
		<argument name="pieces" type="Integer" default="9">
			<desc>The number of pieces to explode, should be a perfect square, any other values are rounded to the nearest square.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the explode effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "explode" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="fade" type="effect">
	<title>Fade Effect</title>
	<desc>
		The fade effect hides or shows an element by fading it.
	</desc>
	<example>
		<height>200</height>
		<desc>Toggle a div using the fade effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "fade" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry type="method" name="focus" return="jQuery">
	<title>.focus()</title>
	<desc>Asynchronously set focus to an element.</desc>
	<signature>
		<argument name="delay" type="Integer">
			<desc>The number of milliseconds to wait before setting focus.</desc>
		</argument>
		<argument name="callback" type="Function" optional="true">
			<desc>A function to invoke after the element has been focused.</desc>
		</argument>
	</signature>
	<longdesc>
		<p>This plugin extends jQuery's built-in  method. If jQuery UI is not loaded, calling the <code>.focus()</code> method may not fail directly, as the method still exists. However, the expected behavior will not occur.</p>
	</longdesc>
	<category slug="methods"/>
	<category slug="overrides"/>
	<category slug="ui-core"/>
</entry><entry type="selector" name="focusable">
	<title>:focusable Selector</title>
	<sample>:focusable</sample>
	<signature/>
	<desc>Selects elements which can be focused.</desc>
	<longdesc>
		<p>Some elements are natively focusable, while others require explicitly setting a tab index. In all cases, the element must be visible in order to be focusable.</p>

		<p>Elements of the following type are focusable if they are not disabled: <code>input</code>, <code>select</code>, <code>textarea</code>, <code>button</code>, and <code>object</code>. Anchors are focusable if they have an <code>href</code> or <code>tabindex</code> attribute. <code>area</code> elements are focusable if they are inside a named map, have an <code>href</code> attribute, and there is a visible image using the map. All other elements are focusable based solely on their <code>tabindex</code> attribute and visibility.</p>

		<p><em>Note: Elements with a negative tab index are <code>:focusable</code>, but not <a href="/tabbable-selector/"><code>:tabbable</code></a>.</em></p>
	</longdesc>
	<example>
		<desc>Select focusable elements and highlight them with a red border.</desc>
		<css>
	input, a, p {
		border: 1px solid #000;
	}
	div {
		padding: 5px;
	}
</css>
		<html>
&lt;div&gt;&lt;input value="text input"&gt;&lt;/div&gt;
&lt;div&gt;&lt;a&gt;anchor without href&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;a href="#"&gt;anchor with href&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;p&gt;paragraph without tabindex&lt;/p&gt;&lt;/div&gt;
&lt;div&gt;&lt;p tabindex="1"&gt;paragraph with tabindex&lt;/p&gt;&lt;/div&gt;
</html>
		<code>
$( ":focusable" ).css( "border-color", "red" );
</code>
	</example>
	<category slug="selectors"/>
	<category slug="ui-core"/>
</entry><entry name="fold" type="effect">
	<title>Fold Effect</title>
	<desc>
		The fold effect hides or shows an element by folding it.
	</desc>
	<arguments>
		<argument name="size" default="15">
			<desc>The size of the "folded" element.</desc>
			<type name="Number">
				<desc>The size of the fold in pixels.</desc>
			</type>
			<type name="String">
				<desc>A percentage of the element's dimension, e.g., <code>"50%"</code>.</desc>
			</type>
		</argument>
		<argument name="horizFirst" type="Boolean" default="false">
			<desc>Whether the horizontal direction happens first when hiding. Remember, showing inverts hiding.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the fold effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "fold" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="hide" type="method" return="jQuery">
	<title>.hide()</title>
	<desc>Hide the matched elements, using custom effects.</desc>
	<longdesc>
		<p>This plugin extends jQuery's built-in  method. If jQuery UI is not loaded, calling the <code>.hide()</code> method may not fail directly, as the method still exists. However, the expected behavior will not occur.</p>
	</longdesc>
	<signature>
		<argument name="effect" type="String">
			<desc>A string indicating which <a href="/category/effects/">effect</a> to use for the transition.</desc>
		</argument>
		<argument name="options" type="Object" optional="true">
			<desc>Effect-specific settings and <a href="/easings/">easing</a>.</desc>
		</argument>
		<argument name="duration" default="400" optional="true">
	<desc>A string or number determining how long the animation will run.</desc>
	<type name="Number">
		<desc>The duration in milliseconds.</desc>
	</type>
	<type name="String">
		<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
	</type>
</argument>
		<argument name="complete" type="Function" optional="true">
	<desc>A function to call once the animation is complete.</desc>
</argument>
	</signature>
	<signature>
	<argument name="options" type="Object">
		<desc>All animation settings. The only required property is <code>effect</code>.</desc>
		<property name="effect" type="String">
			<desc>A string indicating which <a href="/category/effect/">effect</a> to use for the transition.</desc>
		</property>
		<property name="easing" type="String" default="&quot;swing&quot;">
			<desc>A string indicating which <a href="/easings/">easing</a> function to use for the transition.</desc>
		</property>
		<property name="duration" default="400">
			<desc>A string or number determining how long the animation will run.</desc>
			<type name="Number">
				<desc>The duration in milliseconds.</desc>
			</type>
			<type name="String">
				<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
			</type>
		</property>
		<property name="complete" type="Function">
			<desc>A function to call once the animation is complete.</desc>
		</property>
	</argument>
</signature>
	<example>
		<height>200</height>
		<desc>Hide a div using the drop effect.</desc>
		<css>
	div {
		width: 100px;
		height: 100px;
		background: #ccc;
		border: 1px solid #000;
	}
</css>
		<html>
&lt;button&gt;hide the div&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</html>
		<code>
$( "button" ).click(function() {
	$( "div" ).hide( "drop", { direction: "down" }, "slow" );
});
</code>
	</example>
	<category slug="methods"/>
	<category slug="effects"/>
	<category slug="effects-core"/>
	<category slug="overrides"/>
</entry><entry name="highlight" type="effect">
	<title>Highlight Effect</title>
	<desc>
		The highlight effect hides or shows an element by animating its background color first.
	</desc>
	<arguments>
		<argument name="color" type="String" default="&quot;#ffff99&quot;">
			<desc>The background color used during the animation.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the highlight effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "highlight" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry type="method" name="jQuery.widget">
		<title>Widget Factory</title>
		<signature>
			<argument name="name" type="String">
				<desc>The name of the widget to create, including the namespace.</desc>
			</argument>
			<argument name="base" type="Function" optional="true">
				<desc>The base widget to inherit from. This must be a constructor that can be instantiated with the `new` keyword. Defaults to <code>jQuery.Widget</code>.</desc>
			</argument>
			<argument name="prototype" type="PlainObject">
				<desc>The object to use as a prototype for the widget.</desc>
			</argument>
		</signature>
		<desc>Create stateful jQuery plugins using the same abstraction as all jQuery UI widgets.</desc>
		<longdesc>
			<p>You can create new widgets from scratch, using just the <code>$.Widget</code> object as a base to inherit from, or you can explicitly inherit from existing jQuery UI or third-party widgets. Defining a widget with the same name as you inherit from even allows you to extend widgets in place.</p>

			<p>jQuery UI contains many widgets that maintain state and therefore have a slightly different usage pattern than typical jQuery plugins. All of jQuery UI's widgets use the same patterns, which is defined by the widget factory. So if you learn how to use one widget, then you'll know how to use all of them.</p>

			<p><em>Note: This documentation shows examples using the <a href="/progressbar">progressbar widget</a> but the syntax is the same for every widget.</em></p>

			<h3>Initialization</h3>

			<p>In order to track the state of the widget, we must introduce a full life cycle for the widget. The life cycle starts when the widget is initialized. To initialize a widget, we simply call the plugin on one or more elements.</p>

			<pre><code>
				$( "#elem" ).progressbar();
			</code></pre>

			<p>This will initialize each element in the jQuery object, in this case the element with an id of <code>"elem"</code>. Because we called the <code>progressbar()</code> method with no parameters, the widget is initialized with its default options. We can pass a set of options during initialization in order to override the default options.</p>

			<pre><code>
				$( "#elem" ).progressbar({ value: 20 });
			</code></pre>

			<p>We can pass as many or as few options as we want during initialization. Any options that we don't pass will just use their default values.</p>

			<p>The options are part of the widget's state, so we can set options after initialization as well. We'll see this later with the option method.</p>

			<h3>Methods</h3>

			<p>Now that the widget is initialized, we can query its state or perform actions on the widget. All actions after initialization take the form of a method call. To call a method on a widget, we pass the name of the method to the jQuery plugin. For example, to call the <code>value()</code> method on our progressbar widget, we would use:</p>

			<pre><code>
				$( "#elem" ).progressbar( "value" );
			</code></pre>

			<p>If the method accepts parameters, we can pass them after the method name. For example, to pass the parameter <code>40</code> to the <code>value()</code> method, we can use:</p>

			<pre><code>
				$( "#elem" ).progressbar( "value", 40 );
			</code></pre>

			<p>Just like other methods in jQuery, most widget methods return the jQuery object for chaining.</p>

			<pre><code>
				$( "#elem" )
					.progressbar( "value", 90 )
					.addClass( "almost-done" );
			</code></pre>

			<p>Each widget will have its own set of methods based on the functionality that the widget provides. However, there are a few methods that exist on all widgets, which are documented below.</p>

			<h3>Events</h3>

			<p>All widgets have events associated with their various behaviors to notify you when the state is changing. For most widgets, when the events are triggered, the names are prefixed with the widget name. For example, we can bind to progressbar's <code>change</code> event which is triggered whenever the value changes.</p>

			<pre><code>
				$( "#elem" ).bind( "progressbarchange", function() {
					alert( "The value has changed!" );
				});
			</code></pre>

			<p>Each event has a corresponding callback, which is exposed as an option. We can hook into progressbar's <code>change</code> callback instead of binding to the <code>progressbarchange</code> event, if we want to.</p>

			<pre><code>
				$( "#elem" ).progressbar({
					change: function() {
						alert( "The value has changed!" );
					}
				});
			</code></pre>

			<p>All widgets have a <code>create</code> event which is triggered upon instantiation.</p>

			<h3>Instance</h3>

			<p>The widget's instance is stored using <a href="http://api.jquery.com/jQuery.data/"><code>jQuery.data()</code></a> with the widget's full name as the key. Therefore, you can use the following to retrieve the progressbar widget's instance object from the element.</p>

			<pre><code>
				$( "#elem" ).data( "ui-progressbar" );
			</code></pre>

			<p>Whether an element has a given widget bound to it can be determined using the <a href="/data-selector"><code>:data</code></a> selector.</p>

			<pre><code>
				$( "#elem" ).is( ":data( 'ui-progressbar' )" ); // true
				$( "#elem" ).is( ":data( 'ui-draggable' )" ); //false
			</code></pre>

			<p>You can also use <code>:data</code> to get a list of all elements that are instances of a given widget.</p>

			<pre><code>
				$( ":data( 'ui-progressbar' )" );
			</code></pre>

			<h3>Properties</h3>

			<p>All widgets have the following set of properties:</p>

			<ul>
				<li>
					<strong>document</strong>: The <code>document</code> that the widget's element is within.  Useful if you need to interact with widgets within iframes.
				</li>
				<li>
					<strong>element</strong>: A jQuery object containing the element used to instantiate the widget.  If you select multiple elements and call <code>.myWidget()</code>, a separate widget instance will be created for each element.  Therefore, this property will always contain one element.
				</li>
				<li>
					<strong>namespace</strong>: The location on the global jQuery object that the widget's prototype is stored on.  For example a <code>namespace</code> of <code>"ui"</code> indicates that the widget's prototype is stored on <code>$.ui</code>.
				</li>
				<li>
					<strong>options</strong>: An object containing the options currently being used by the widget.  On instantiation, any options provided by the user will automatically be merged with any default values defined in <code>$.myNamespace.myWidget.prototype.options</code>.  User specified options override the defaults.
				</li>
				<li>
					<strong>uuid</strong>: A unique integer identifier for the widget.
				</li>
				<li>
					<strong>version</strong>: The string version of the widget.  For jQuery UI widgets this will be set to the version of jQuery UI the widget is using.  Widget developers have to set this property in their prototype explicitly.
				</li>
				<li>
					<strong>widgetEventPrefix</strong>: The prefix prepended to the name of events fired from this widget.  For example the <code>widgetEventPrefix</code> of the <a href="/draggable">draggable widget</a> is <code>"drag"</code>, therefore when a draggable is created, the name of the event fired is <code>"dragcreate"</code>.  By default the <code>widgetEventPrefix</code> of a widget is its name.  <em>Note: This property is deprecated and will be removed in a later release.  Event names will be changed to widgetName:eventName (e.g. <code>"draggable:create"</code>.</em>
				</li>
				<li>
					<strong>widgetFullName</strong>: The full name of the widget including the namespace.  For <code>$.widget( "myNamespace.myWidget", {} )</code>, <code>widgetFullName</code> will be <code>"myNamespace-myWidget"</code>.
				</li>
				<li>
					<strong>widgetName</strong>: The name of the widget.  For  <code>$.widget( "myNamespace.myWidget", {} )</code>, <code>widgetName</code> will be <code>"myWidget"</code>.
				</li>
				<li>
					<strong>window</strong>: The <code>window</code> that the widget's element is within.  Useful if you need to interact with widgets within iframes.
				</li>
			</ul>
		</longdesc>
		<category slug="utilities"/>
	</entry><entry type="widget" name="jQuery.Widget" widget-name="widget" animated-element="element" widget-element="original element or other relevant generated element">
		<title>Base Widget</title>
		<desc>The base widget used by the widget factory.</desc>
		<options>
			<option name="disabled" default="false" example-value="true">
	<desc>Disables the jQuery.Widget if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
			<option name="hide" default="null" example-value="{ effect: &quot;explode&quot;, duration: 1000 }">
	<desc>If and how to animate the hiding of the element.</desc>
	<type name="Boolean">
		<desc>
			When set to <code>false</code>, no animation will be used and the element will be hidden immediately.
			When set to <code>true</code>, the element will fade out with the default duration and the default easing.
		</desc>
	</type>
	<type name="Number">
		<desc>
			The element will fade out with the specified duration and the default easing.
		</desc>
	</type>
	<type name="String">
		<desc>
			The element will be hidden using the specified effect.
			The value can either be the name of a built-in jQuery animation method, such as <code>"slideUp"</code>, or the name of a jQuery UI effect, such as <code>"fold"</code>.
			In either case the effect will be used with the default duration and the default easing.
		</desc>
	</type>
	<type name="Object">
		<desc>If the value is an object, then <code>effect</code>, <code>delay</code>, <code>duration</code>, and <code>easing</code> properties may be provided. If the <code>effect</code> property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If <code>duration</code> or <code>easing</code> is omitted, then the default values will be used. If <code>effect</code> is omitted, then <code>"fadeOut"</code> will be used. If <code>delay</code> is omitted, then no delay is used.</desc>
	</type>
</option>
			<option name="show" default="null" example-value="{ effect: &quot;blind&quot;, duration: 800 }">
	<desc>If and how to animate the showing of the element.</desc>
	<type name="Boolean">
		<desc>
			When set to <code>false</code>, no animation will be used and the element will be shown immediately.
			When set to <code>true</code>, the element will fade in with the default duration and the default easing.
		</desc>
	</type>
	<type name="Number">
		<desc>
			The element will fade in with the specified duration and the default easing.
		</desc>
	</type>
	<type name="String">
		<desc>
			The element will be shown using the specified effect.
			The value can either be the name of a built-in jQuery animation method, such as <code>"slideDown"</code>, or the name of a jQuery UI effect, such as <code>"fold"</code>.
			In either case the effect will be used with the default duration and the default easing.
		</desc>
	</type>
	<type name="Object">
		<desc>If the value is an object, then <code>effect</code>, <code>delay</code>, <code>duration</code>, and <code>easing</code> properties may be provided. If the <code>effect</code> property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If <code>duration</code> or <code>easing</code> is omitted, then the default values will be used. If <code>effect</code> is omitted, then <code>"fadeIn"</code> will be used.  If <code>delay</code> is omitted, then no delay is used.</desc>
	</type>
</option>
		</options>
		<methods suppress-examples="true">
			<method name="destroy">
	<desc>
		Removes the jQuery.Widget functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
			<method name="disable">
	<desc>
		Disables the jQuery.Widget.
	</desc>
</method>
			<method name="enable">
	<desc>
		Enables the jQuery.Widget.
	</desc>
</method>
			<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the jQuery.Widget.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current jQuery.Widget options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the jQuery.Widget option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the jQuery.Widget.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
			<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the original element or other relevant generated element.
	</desc>
</method>
			<method name="_create">
				<desc>
					The <code>_create()</code> method is the widget's constructor.
					There are no parameters, but <code>this.element</code> and <code>this.options</code> are already set.
				</desc>
			</method>
			<method name="_destroy">
				<desc>
					The public <a href="#method-destroy"><code>destroy()</code></a> method cleans up all common data, events, etc. and then delegates out to <code>_destroy()</code> for custom, widget-specific, cleanup.
				</desc>
			</method>
			<method name="_getCreateEventData" return="Object">
				<desc>
					All widgets trigger the <a href="#event-create"><code>create</code></a> event. By default, no data is provided in the event, but this method can return an object which will be passed as the <code>create</code> event's data.
				</desc>
			</method>
			<method name="_getCreateOptions" return="Object">
				<desc>
					This method allows the widget to define a custom method for defining options during instantiation. This user-provided options override the options returned by this method which override the default options.
				</desc>
			</method>
			<method name="_init">
				<desc>
					Widgets have the concept of initialization that is distinct from creation. Any time the plugin is called with no arguments or with only an option hash, the widget is initialized; this includes when the widget is created.

					<p><em>Note: Initialization should only be handled if there is a logical action to perform on successive calls to the widget with no arguments.</em></p>
				</desc>
			</method>
			<method name="_setOptions">
				<desc>
					Called whenever the <a href="#method-option"><code>option()</code></a> method is called, regardless of the form in which the <code>option()</code> method was called.
					<p>Overriding this is useful if you can defer processor-intensive changes for multiple option changes.</p>
				</desc>
				<argument name="options" type="Object">
					<desc>A map of option-value pairs to set.</desc>
				</argument>
			</method>
			<method name="_setOption">
				<desc>
					Called from the <a href="#method-_setOptions"><code>_setOptions()</code></a> method for each individual option. Widget state should be updated based on changes.
				</desc>
				<argument name="key" type="String">
					<desc>The name of the option to set.</desc>
				</argument>
				<argument name="value" type="Object">
					<desc>A value to set for the option.</desc>
				</argument>
			</method>
			<method name="_on">
				<desc>
					Binds event handlers to the specified element(s). Delegation is supported via selectors inside the event names, e.g., "<code>click .foo</code>". The <code>_on()</code> method provides several benefits of direct event binding:
					<ul>
						<li>Maintains proper <code>this</code> context inside the handlers.</li>
						<li>Automatically handles disabled widgets: If the widget is disabled or the event occurs on an element with the <code>ui-state-disabled</code> class, the event handler is not invoked. Can be overridden with the <code>suppressDisabledCheck</code> parameter.</li>
						<li>Event handlers are automatically namespaced and cleaned up on destroy.</li>
					</ul>
				</desc>
				<argument name="suppressDisabledCheck" type="Boolean" optional="true" default="false">
					<desc>Whether or not to bypass the disabled check.</desc>
				</argument>
				<argument name="element" type="jQuery" optional="true">
					<desc>Which element(s) to bind the event handlers to. If no element is provided, <code>this.element</code> is used.</desc>
				</argument>
				<argument name="handlers" type="Object">
					<desc>
						A map in which the string keys represent the event type and optional selector for delegation, and the values represent a handler function to be called for the event.
					</desc>
				</argument>
			</method>
			<method name="_off">
				<desc>
					Unbinds event handlers from the specified element(s).
				</desc>
				<argument name="element" type="jQuery">
					<desc>
						The element(s) to unbind the event handlers from. Unlike the <code>_on()</code> method, the elements are required for <code>_off()</code>.
					</desc>
				</argument>
				<argument name="eventName" type="String">
					<desc>One or more space-separated event types.</desc>
				</argument>
			</method>
			<method name="_super">
				<desc>
					Invokes the method of the same name from the parent widget, with any specified arguments. Essentially <code>.call()</code>.
				</desc>
			</method>
			<method name="_superApply">
				<desc>
					Invokes the method of the same name from the parent widget, with the array of arguments. Essentially <code>.apply()</code>.
				</desc>
				<argument name="arguments" type="Array">
					<desc>Array of arguments to pass to the parent method.</desc>
				</argument>
			</method>
			<method name="_delay" return="Number">
				<desc>
					Invokes the provided function after a specified delay. Keeps <code>this</code> context correct. Essentially <code>setTimeout()</code>.
					<p>Returns the timeout ID for use with <code>clearTimeout()</code>.</p>
				</desc>
				<argument name="fn">
					<desc>The function to invoke. Can also be the name of a method on the widget.</desc>
					<type name="Function"/>
					<type name="String"/>
				</argument>
				<argument name="delay" type="Number" optional="true">
					<desc>The number of milliseconds to wait before invoking the function. Defaults to <code>0</code>.</desc>
				</argument>
			</method>
			<method name="_hoverable">
				<desc>
					Sets up <code>element</code> to apply the <code>ui-state-hover</code> class on hover.
					<p>The event handlers are automatically cleaned up on destroy.</p>
				</desc>
				<argument name="element" type="jQuery">
					<desc>The element(s) to apply the hoverable behavior to.</desc>
				</argument>
			</method>
			<method name="_focusable">
				<desc>
					Sets up <code>element</code> to apply the <code>ui-state-focus</code> class on focus.
					<p>The event handlers are automatically cleaned up on destroy.</p>
				</desc>
				<argument name="element" type="jQuery">
					<desc>The element(s) to apply the focusable behavior to.</desc>
				</argument>
			</method>
			<method name="_trigger">
				<desc>
					Triggers an event and its associated callback.
					<p>The option with the name equal to type is invoked as the callback.</p>
					<p>The event name is the widget name + type.</p>
					<p><em>Note: When providing data, you must provide all three parameters. If there is no event to pass along, just pass <code>null</code>.</em></p>
				</desc>
				<argument name="type" type="String">
					<desc>The <code>type</code> should match the name of a callback option. The full event type will be generated automatically.</desc>
				</argument>
				<argument name="event" type="Event" optional="true">
					<desc>The original event that caused this event to occur; useful for providing context to the listener.</desc>
				</argument>
				<argument name="data" type="Object" optional="true">
					<desc>A hash of data associated with the event.</desc>
				</argument>
			</method>
			<method name="_show">
				<desc>
					Shows an element immediately, using built-in animation methods, or using custom effects.
					See the <a href="#option-show">show</a> option for possible <code>option</code> values.
				</desc>
				<argument name="element" type="jQuery">
					<desc>The element(s) to show.</desc>
				</argument>
				<argument name="option" type="Object">
					<desc>The settings defining how to show the element.</desc>
				</argument>
				<argument name="callback" type="Function" optional="true">
					<desc>Callback to invoke after the element has been fully shown.</desc>
				</argument>
			</method>
			<method name="_hide">
				<desc>
					Hides an element immediately, using built-in animation methods, or using custom effects.
					See the <a href="#option-hide">hide</a> option for possible <code>option</code> values.
				</desc>
				<argument name="element" type="jQuery">
					<desc>The element(s) to hide.</desc>
				</argument>
				<argument name="option" type="Object">
					<desc>The settings defining how to hide the element.</desc>
				</argument>
				<argument name="callback" type="Function" optional="true">
					<desc>Callback to invoke after the element has been fully hidden.</desc>
				</argument>
			</method>
		</methods>
		<events>
			<event name="create">
	<desc>
		Triggered when the jQuery.Widget is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		</events>
		<category slug="utilities"/>
		<category slug="widgets"/>
	</entry><entry name="menu" type="widget" widget-element="menu">
	<title>Menu Widget</title>
	<desc>
		Themeable menu with mouse and keyboard interactions for navigation.
	</desc>
	<longdesc>
		<p>A menu can be created from any valid markup as long as the elements have a strict parent/child relationship and each menu item has an anchor. The most commonly used element is the unordered list (<code>&lt;ul&gt;</code>):</p>

		<pre>
&lt;ul id="menu"&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 1&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 2&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 3&lt;/a&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-1&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-2&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-3&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-4&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-5&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 4&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</pre>

		<p>If you use a structure other than <code>&lt;ul&gt;</code>/<code>&lt;li&gt;</code>, including using the same element for the menu and the menu items, use the <a href="#option-menus"><code>menus</code></a> option to specify a way to differentiate the two elements, e.g., <code>menus: "div.menuElement"</code>.</p>

		<p>Any menu item can be disabled by adding the <code>ui-state-disabled</code> class to that element.</p>

		<p>To add icons to the menu, include them in the markup:</p>

		<pre>
&lt;ul id="menu"&gt;
	&lt;li&gt;&lt;a href="#"&gt;&lt;span class="ui-icon ui-icon-disk"&gt;&lt;/span&gt;Save&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</pre>
		<p>Menu automatically adds the necessary padding to items without icons.</p>

		<h3>Keyboard interaction</h3>

		<ul>
			<li>ENTER/SPACE: Invoke the focused menu item's action, which may be opening a submenu.</li>
			<li>UP: Move focus to the previous menu item.</li>
			<li>DOWN: Move focus to the next menu item.</li>
			<li>RIGHT: Open the submenu, if available.</li>
			<li>LEFT: Close the current submenu and move focus to the parent menu item. If not in a submenu, do nothing.</li>
			<li>ESCAPE: Close the current submenu and move focus to the parent menu item. If not in a submenu, do nothing.</li>
		</ul>

		<p>Typing a letter moves focus to the first item whose title starts with that character. Repeating the same character cycles through matching items. Typing more characters within the one second timer matches those characters.</p>

		<p>Disabled items can receive keyboard focus, but do not allow any other interaction.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/position/">Position</a></li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.9</added>
	<options>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the menu if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="icons" type="Object" default="{ submenu: &quot;ui-icon-carat-1-e&quot; }" example-value="{ submenu: &quot;ui-icon-circle-triangle-e&quot; }">
			<desc>
				Icons to use for submenus, matching an icon defined by the jQuery UI CSS Framework.
				<ul>
					<li>submenu (string, default: "ui-icon-carat-1-e")</li>
				</ul>
			</desc>
		</option>
		<option name="menus" type="String" default="&quot;ul&quot;" example-value="&quot;div&quot;">
			<desc>
				<p>Selector for the elements that serve as the menu container, including sub-menus.</p>
				<p><em>Note: The <code>menus</code> option should not be changed after initialization. Existing submenus will not be updated.</em></p>
			</desc>
		</option>
		<option name="position" type="Object" default="{ my: &quot;left top&quot;, at: &quot;right top&quot; }" example-value="{ my: &quot;left top&quot;, at: &quot;right-5 top+5&quot; }">
			<desc>Identifies the position of submenus in relation to the associated parent menu item. The <code>of</code> option defaults to the parent menu item, but you can specify another element to position against. You can refer to the <a href="/position/">jQuery UI Position</a> utility for more details about the various options.</desc>
		</option>
		<option name="role" type="String" default="&quot;menu&quot;" example-value="null">
			<desc>
				<p>Customize the ARIA roles used for the menu and menu items. The default uses <code>"menuitem"</code> for items. Setting the <code>role</code> option to <code>"listbox"</code> will use <code>"option"</code> for items. If set to <code>null</code>, no roles will be set, which is useful if the menu is being controlled by another element that is maintaining focus.</p>
				<p><em>Note: The <code>role</code> option should not be changed after initialization. Existing (sub)menus and menu items will not be updated.</em></p>
			</desc>
		</option>
	</options>
	<methods>
		<method name="blur">
			<desc>
				Removes focus from a menu, resets any active element styles and triggers the menu's <a href="event-blur"><code>blur</code></a> event.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the menu to blur.</desc>
			</argument>
		</method>
		<method name="collapse">
			<desc>
				Closes the currently active sub-menu.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the menu to collapse.</desc>
			</argument>
		</method>
		<method name="collapseAll" example-params="null, true">
			<desc>
				Closes all open sub-menus.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the menu to collapse.</desc>
			</argument>
			<argument name="all" type="Boolean" optional="true">
				<desc>Indicates whether all sub-menus should be closed or only sub-menus below and including the menu that is or contains the target of the triggering event.</desc>
			</argument>
		</method>
		<method name="destroy">
	<desc>
		Removes the menu functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the menu.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the menu.
	</desc>
</method>
		<method name="expand">
			<desc>
				Opens the sub-menu below the currently active item, if one exists.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the menu to expand.</desc>
			</argument>
		</method>
		<method name="focus" example-params="null, menu.find( &quot;.ui-menu-item:last&quot; )">
			<desc>
				Activates a particular menu item, begins opening any sub-menu if present and triggers the menu's <a href="#event-focus"><code>focus</code></a> event.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the menu item to gain focus.</desc>
			</argument>
			<argument name="item" type="jQuery">
				<desc>The menu item to focus/activate.</desc>
			</argument>
		</method>
		<method name="isFirstItem" example-return-var="firstItem">
			<desc>
				Returns a boolean value stating whether or not the currently active item is the first item in the menu.
			</desc>
		</method>
		<method name="isLastItem" example-return-var="lastItem">
			<desc>
				Returns a boolean value stating whether or not the currently active item is the last item in the menu.
			</desc>
		</method>
		<method name="next">
			<desc>
				Moves active state to next menu item.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the focus to move.</desc>
			</argument>
		</method>
		<method name="nextPage">
			<desc>
				Moves active state to first menu item below the bottom of a scrollable menu or the last item if not scrollable.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the focus to move.</desc>
			</argument>
		</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the menu.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current menu options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the menu option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the menu.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="previous">
			<desc>
				Moves active state to previous menu item.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the focus to move.</desc>
			</argument>
		</method>
		<method name="previousPage">
			<desc>
				Moves active state to first menu item above the top of a scrollable menu or the first item if not scrollable.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the focus to move.</desc>
			</argument>
		</method>
		<method name="refresh">
			<desc>
				Initializes sub-menus and menu items that have not already been initialized. New menu items, including sub-menus can be added to the menu or all of the contents of the menu can be replaced and then initialized with the <code>refresh()</code> method.
			</desc>
		</method>
		<method name="select">
			<desc>
				Selects the currently active menu item, collapses all sub-menus and triggers the menu's <a href="#event-select"><code>select</code></a> event.
			</desc>
			<argument name="event" type="Event" optional="true">
				<desc>What triggered the selection.</desc>
			</argument>
		</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the menu.
	</desc>
</method>
	</methods>
	<events>
		<event name="blur">
			<desc>
				Triggered when the menu loses focus.
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="item" type="jQuery">
					<desc>
						The currently active menu item.
					</desc>
				</property>
			</argument>
		</event>
		<event name="create">
	<desc>
		Triggered when the menu is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="focus">
			<desc>
				Triggered when a menu gains focus or when any menu item is activated.
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="item" type="jQuery">
					<desc>
						The currently active menu item.
					</desc>
				</property>
			</argument>
		</event>
		<event name="select">
			<desc>
				Triggered when a menu item is selected.
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="item" type="jQuery">
					<desc>
						The currently active menu item.
					</desc>
				</property>
			</argument>
		</event>
	</events>
	<example>
		<desc>A simple jQuery UI Menu</desc>
		<code>
$( "#menu" ).menu();
</code>
		<css>
	.ui-menu {
		width: 200px;
	}
</css>
		<html>
&lt;ul id="menu"&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 1&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 2&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 3&lt;/a&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-1&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-2&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-3&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-4&lt;/a&gt;&lt;/li&gt;
			&lt;li&gt;&lt;a href="#"&gt;Item 3-5&lt;/a&gt;&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 4&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="#"&gt;Item 5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="position" type="method" return="jQuery">
	<title>.position()</title>
	<desc>Position an element relative to another.</desc>
	<longdesc>
		<p>The jQuery UI <code>.position()</code> method allows you to position an element relative to the window, document, another element, or the cursor/mouse, without worrying about offset parents.</p>
		<p><em>Note: jQuery UI does not support positioning hidden elements.</em></p>
		<p>This is a standalone jQuery plugin and has no dependencies on other jQuery UI components.</p>
		<p>This plugin extends jQuery's built-in  method. If jQuery UI is not loaded, calling the <code>.position()</code> method may not fail directly, as the method still exists. However, the expected behavior will not occur.</p>
	</longdesc>
	<added>1.8</added>
	<signature>
		<argument name="options" type="Object">
			<property name="my" default="&quot;center&quot;">
				<desc>Defines which position <strong>on the element being positioned</strong> to align with the target element: "horizontal vertical" alignment. A single value such as <code>"right"</code> will be normalized to <code>"right center"</code>, <code>"top"</code> will be normalized to <code>"center top"</code> (following CSS convention). Acceptable horizontal values: <code>"left"</code>, <code>"center"</code>, <code>"right"</code>. Acceptable vertical values: <code>"top"</code>, <code>"center"</code>, <code>"bottom"</code>. Example: <code>"left top"</code> or <code>"center center"</code>. Each dimension can also contain offsets, in pixels or percent, e.g., <code>"right+10 top-25%"</code>. Percentage offsets are relative to the element being positioned.</desc>
				<type name="String"/>
			</property>
			<property name="at" default="&quot;center&quot;">
				<desc>Defines which position <strong>on the target element</strong> to align the positioned element against: "horizontal vertical" alignment. See the <a href="#option-my"><code>my</code></a> option for full details on possible values. Percentage offsets are relative to the target element.</desc>
				<type name="String"/>
			</property>
			<property name="of" default="null">
				<desc>Which element to position against. If you provide a selector or jQuery object, the first matching element will be used. If you provide an event object, the <code>pageX</code> and <code>pageY</code> properties will be used. Example: <code>"#top-menu"</code></desc>
				<type name="Selector"/>
				<type name="Element"/>
				<type name="jQuery"/>
				<type name="Event"/>
			</property>
			<property name="collision" default="&quot;flip&quot;">
				<desc>
					<p>When the positioned element overflows the window in some direction, move it to an alternative position. Similar to <a href="#option-my"><code>my</code></a> and <a href="#option-at"><code>at</code></a>, this accepts a single value or a pair for horizontal/vertical, e.g., <code>"flip"</code>, <code>"fit"</code>, <code>"fit flip"</code>, <code>"fit none"</code>.</p>
					<ul>
						<li><code>"flip"</code>: Flips the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.</li>
						<li><code>"fit"</code>: Shift the element away from the edge of the window.</li>
						<li><code>"flipfit"</code>: First applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.</li>
						<li><code>"none"</code>: Does not apply any collision detection.</li>
					</ul>
				</desc>
				<type name="String"/>
			</property>
			<property name="using" default="null">
				<desc>
					When specified, the actual property setting is delegated to this callback. Receives two parameters: The first is a hash of <code>top</code> and <code>left</code> values for the position that should be set and can be forwarded to <code>.css()</code> or <code>.animate()</code>.
					<p>The second provides feedback about the position and dimensions of both elements, as well as calculations to their relative position. Both <code>target</code> and <code>element</code> have these properties: <code>element</code>, <code>left</code>, <code>top</code>, <code>width</code>, <code>height</code>. In addition, there's <code>horizontal</code>, <code>vertical</code> and <code>important</code>, giving you twelve potential directions like <code>{ horizontal: "center", vertical: "left", important: "horizontal" }</code>.</p>
				</desc>
				<type name="Function"/>
			</property>
			<property name="within" default="window">
				<desc>Element to position within, affecting collision detection. If you provide a selector or jQuery object, the first matching element will be used.</desc>
				<type name="Selector"/>
				<type name="Element"/>
				<type name="jQuery"/>
			</property>
		</argument>
	</signature>
	<example>
		<desc>A simple jQuery UI Position example.</desc>
		<css>
	.positionDiv {
		position: absolute;
		width: 75px;
		height: 75px;
		background: green;
	}
</css>
		<code>
$( "#position1" ).position({
	my: "center",
	at: "center",
	of: "#targetElement"
});

$( "#position2" ).position({
	my: "left top",
	at: "left top",
	of: "#targetElement"
});

$( "#position3" ).position({
	my: "right center",
	at: "right bottom",
	of: "#targetElement"
});

$( document ).mousemove(function( event ) {
	$( "#position4" ).position({
		my: "left+3 bottom-3",
		of: event,
		collision: "fit"
	});
});
</code>
		<html>
&lt;div id="targetElement"&gt;
	&lt;div class="positionDiv" id="position1"&gt;&lt;/div&gt;
	&lt;div class="positionDiv" id="position2"&gt;&lt;/div&gt;
	&lt;div class="positionDiv" id="position3"&gt;&lt;/div&gt;
	&lt;div class="positionDiv" id="position4"&gt;&lt;/div&gt;
&lt;/div&gt;
</html>
	</example>
	<category slug="methods"/>
	<category slug="overrides"/>
	<category slug="utilities"/>
</entry><entry name="progressbar" type="widget" widget-element="progressbar">
	<title>Progressbar Widget</title>
	<desc>Display status of a determinate or indeterminate process.</desc>
	<longdesc>
		<p>
			The progress bar is designed to display the current percent complete for a process. The bar is coded to be flexibly sized through CSS and will scale to fit inside its parent container by default.
		</p>
		<p>
			A determinate progress bar should only be used in situations where the system can accurately update the current status. A determinate progress bar should never fill from left to right, then loop back to empty for a single process — if the actual status cannot be calculated, an indeterminate progress bar should be used to provide user feedback.
		</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.6</added>
	<options>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the progressbar if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="max" default="100" type="Number" example-value="1024">
			<desc>The maximum value of the progressbar.</desc>
		</option>
		<option name="value" default="0" example-value="25">
			<desc>The value of the progressbar.</desc>
			<type name="Number">
				<desc>
					A value between <code>0</code> and the <a href="#option-max"><code>max</code></a>.
				</desc>
			</type>
			<type name="Boolean">
				<desc>
					Value can be set to <code>false</code> to create an indeterminate progressbar.
				</desc>
			</type>
		</option>
	</options>
	<events>
		<event name="change">
			<desc>Triggered when the value of the progressbar changes.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="create">
	<desc>
		Triggered when the progressbar is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="complete">
			<desc>Triggered when the value of the progressbar reaches the maximum value.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
	</events>
	<methods>
		<method name="destroy">
	<desc>
		Removes the progressbar functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the progressbar.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the progressbar.
	</desc>
</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the progressbar.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current progressbar options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the progressbar option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the progressbar.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="value">
			<desc>Gets or sets the current value of the progressbar.</desc>
			<signature example-return-var="progressSoFar">
				<return type="Number"/>
				<return type="Boolean"/>
				<desc>Gets the current value of the progressbar.</desc>
			</signature>
			<signature example-params="50">
				<desc>Sets the current value of the progressbar.</desc>
				<argument name="value">
					<desc>The value to set. See the <a href="#option-value"><code>value</code></a> option for details on valid values.</desc>
					<type name="Number"/>
					<type name="Boolean"/>
				</argument>
			</signature>
		</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the progressbar.
	</desc>
</method>
	</methods>
	<example>
		<height>50</height>
		<desc>A simple jQuery UI Progressbar</desc>
		<code>
$( "#progressbar" ).progressbar({
	value: 37
});
</code>
		<html>
&lt;div id="progressbar"&gt;&lt;/div&gt;
</html>
	</example>
	<example>
		<height>50</height>
		<desc>A simple jQuery UI Indeterminate Progressbar</desc>
		<code>
$( "#progressbar" ).progressbar({
	value: false
});
</code>
		<html>
&lt;div id="progressbar"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="puff" type="effect">
	<title>Puff Effect</title>
	<desc>
		Creates a puff effect by scaling the element up and hiding it at the same time.
	</desc>
	<arguments>
		<argument name="percent" type="Number" default="150">
			<desc>The percentage to scale to.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the puff effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "puff" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="pulsate" type="effect">
	<title>Pulsate Effect</title>
	<desc>
		The pulsate effect hides or shows an element by pulsing it in or out.
	</desc>
	<arguments>
		<argument name="times" type="Integer" default="5">
			<desc>The number of times the element should pulse. An extra half pulse is added for hide/show.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the pulsate effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "pulsate" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="removeClass" type="method" return="jQuery">
	<title>.removeClass()</title>
	<desc>Removes the specified class(es) from each of the set of matched elements while animating all style changes.</desc>
	<longdesc>
		<div>
	<p>Similar to native CSS transitions, jQuery UI's class animations provide a smooth transition from one state to another while allowing you to keep all the details about which styles to change in CSS and out of your JavaScript. All class animation methods, including <code>.removeClass()</code>, support custom durations and easings, as well as providing a callback for when the animation completes.</p>
	<p>Not all styles can be animated. For example, there is no way to animate a background image. Any styles that cannot be animated will be changed at the end of the animation.</p>
</div>
		<p>This plugin extends jQuery's built-in  method. If jQuery UI is not loaded, calling the <code>.removeClass()</code> method may not fail directly, as the method still exists. However, the expected behavior will not occur.</p>
	</longdesc>
	<signature>
		<argument name="className" type="String">
			<desc>One or more class names (space separated) to be removed from the class attribute of each matched element.</desc>
		</argument>
		<argument name="duration" default="400" optional="true">
	<desc>A string or number determining how long the animation will run.</desc>
	<type name="Number">
		<desc>The duration in milliseconds.</desc>
	</type>
	<type name="String">
		<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
	</type>
</argument>
		<argument name="easing" type="String" default="swing" optional="true">
	<desc>A string indicating which <a href="/easings/">easing</a> function to use for the transition.</desc>
</argument>
		<argument name="complete" type="Function" optional="true">
	<desc>A function to call once the animation is complete.</desc>
</argument>
	</signature>
	<example>
		<desc>Removes the class "big-blue" from the matched elements.</desc>
		<css>
	div {
		width: 100px;
		height: 100px;
		background-color: #ccc;
	}
	.big-blue {
		width: 200px;
		height: 200px;
		background-color: #00f;
	}
</css>
		<html>
&lt;div class="big-blue"&gt;&lt;/div&gt;
</html>
		<code>
$( "div" ).click(function() {
	$( this ).removeClass( "big-blue", 1000, "easeInBack" );
});
</code>
	</example>
	<category slug="effects"/>
	<category slug="effects-core"/>
	<category slug="overrides"/>
</entry><entry type="method" name="removeUniqueId" return="jQuery">
	<title>.removeUniqueId()</title>
	<desc>Remove ids that were set by <code>.uniqueId()</code> for the set of matched elements.</desc>
	<signature>
		<added>1.9</added>
	</signature>
	<longdesc>
		<p>The <code>.removeUniqueId()</code> will remove ids that were set by <a href="/uniqueId"><code>.uniqueId()</code></a>. Calling <code>.removeUniqueId()</code> on an element that did not have its id set by <code>.uniqueId()</code> will have no affect, even if the element has an id.</p>
	</longdesc>
	<category slug="methods"/>
	<category slug="ui-core"/>
</entry><entry name="resizable" type="widget" widget-element="resizable element" event-prefix="resize">
	<title>Resizable Widget</title>
	<desc>Change the size of an element using the mouse.</desc>
	<longdesc>
		<p>The jQuery UI Resizable plugin makes selected elements resizable (meaning they have draggable resize handles). You can specify one or more handles as well as min and max width and height.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/mouse/">Mouse Interaction</a></li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.0</added>
	<options>
		<option name="alsoResize" default="false" example-value="&quot;#mirror&quot;">
			<desc>One or more elements to resize synchronously with the resizable element.</desc>
			<type name="Selector"/>
			<type name="jQuery"/>
			<type name="Element"/>
		</option>
		<option name="animate" type="Boolean" default="false" example-value="true">
			<desc>Animates to the final size after resizing.</desc>
		</option>
		<option name="animateDuration" default="&quot;slow&quot;" example-value="&quot;fast&quot;">
			<desc>How long to animate when using the <a href="#option-animate"><code>animate</code></a> option.</desc>
			<type name="Number">
				<desc>Duration in milliseconds.</desc>
			</type>
			<type name="String">
				<desc>A named duration, such as <code>"slow"</code> or <code>"fast"</code>.</desc>
			</type>
		</option>
		<option name="animateEasing" type="String" default="&quot;swing&quot;" example-value="&quot;easeOutBounce&quot;">
			<desc>Which <a href="/easings/">easing</a> to apply when using the <a href="#option-animate"><code>animate</code></a> option.</desc>
		</option>
		<option name="aspectRatio" default="false" example-value="true">
			<desc>Whether the element should be constrained to a specific aspect ratio.</desc>
			<type name="Boolean">
				<desc>When set to <code>true</code>, the element will maintain its original aspect ratio.</desc>
			</type>
			<type name="Number">
				<desc>Force the element to maintain a specific aspect ratio during resizing.</desc>
			</type>
		</option>
		<option name="autoHide" type="Boolean" default="false" example-value="true">
			<desc>Whether the handles should hide when the user is not hovering over the element.</desc>
		</option>
		<option name="cancel" type="Selector" default="&quot;input,textarea,button,select,option&quot;" example-value="&quot;.cancel&quot;">
			<desc>Prevents resizing from starting on specified elements.</desc>
		</option>
		<option name="containment" default="false" example-value="&quot;parent&quot;">
			<desc>Constrains resizing to within the bounds of the specified element or region.</desc>
			<type name="Selector">
				<desc>The resizable element will be contained to the bounding box of the first element found by the selector. If no element is found, no containment will be set.</desc>
			</type>
			<type name="Element">
				<desc>The resizable element will be contained to the bounding box of this element.</desc>
			</type>
			<type name="String">
				<desc>Possible values: <code>"parent"</code> and <code>"document"</code>.</desc>
			</type>
		</option>
		<option name="delay" type="Number" default="0" example-value="150">
			<desc>Tolerance, in milliseconds, for when resizing should start. If specified, resizing will not start until after mouse is moved beyond duration. This can help prevent unintended resizing when clicking on an element.</desc>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the resizable if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="distance" type="Number" default="1" example-value="30">
			<desc>Tolerance, in pixels, for when resizing should start. If specified, resizing will not start until after mouse is moved beyond distance. This can help prevent unintended resizing when clicking on an element.</desc>
		</option>
		<option name="ghost" type="Boolean" default="false" example-value="true">
			<desc>If set to <code>true</code>, a semi-transparent helper element is shown for resizing.</desc>
		</option>
		<option name="grid" type="Array" default="false" example-value="[ 20, 10 ]">
			<desc>Snaps the resizing element to a grid, every x and y pixels. Array values: <code>[ x, y ]</code>.</desc>
		</option>
		<option name="handles" default="&quot;e, s, se&quot;" example-value="&quot;n, e, s, w&quot;">
			<desc>Which handles can be used for resizing.</desc>
			<type name="String">
				<desc>A comma delimited list of any of the following: n, e, s, w, ne, se, sw, nw, all. The necessary handles will be auto-generated by the plugin.</desc>
			</type>
			<type name="Object">
				<desc>
					<p>The following keys are supported: { n, e, s, w, ne, se, sw, nw }. The value of any specified should be a jQuery selector matching the child element of the resizable to use as that handle. If the handle is not a child of the resizable, you can pass in the DOMElement or a valid jQuery object directly.</p>
					<p><em>Note: When generating your own handles, each handle must have the <code>ui-resizable-handle</code> class, as well as the appropriate <code>ui-resizable-{direction}</code> class, .e.g., <code>ui-resizable-s</code>.</em></p>
				</desc>
			</type>
		</option>
		<option name="helper" type="String" default="false" example-value="&quot;resizable-helper&quot;">
			<desc>A class name that will be added to a proxy element to outline the resize during the drag of the resize handle. Once the resize is complete, the original element is sized.</desc>
		</option>
		<option name="maxHeight" type="Number" default="null" example-value="300">
			<desc>The maximum height the resizable should be allowed to resize to.</desc>
		</option>
		<option name="maxWidth" type="Number" default="null" example-value="300">
			<desc>The maximum width the resizable should be allowed to resize to.</desc>
		</option>
		<option name="minHeight" type="Number" default="10" example-value="150">
			<desc>The minimum height the resizable should be allowed to resize to.</desc>
		</option>
		<option name="minWidth" type="Number" default="10" example-value="150">
			<desc>The minimum width the resizable should be allowed to resize to.</desc>
		</option>
	</options>
	<events>
		<event name="create">
	<desc>
		Triggered when the resizable is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="start">
			<desc>This event is triggered at the start of a resize operation.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="element" type="jQuery">
					<desc>The jQuery object representing the element to be resized</desc>
				</property>
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper that's being resized</desc>
				</property>
				<property name="originalElement" type="jQuery">
					<desc>The jQuery object representing the original element before it is wrapped</desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The position represented as <code>{ left, top }</code> before the resizable is resized</desc>
				</property>
				<property name="originalSize" type="Object">
					<desc>The size represented as <code>{ width, height }</code> before the resizable is resized</desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position represented as <code>{ left, top }</code></desc>
				</property>
				<property name="size" type="Object">
					<desc>The current size represented as <code>{ width, height }</code></desc>
				</property>
			</argument>
		</event>
		<event name="resize">
			<desc>This event is triggered during the resize, on the drag of the resize handler.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="element" type="jQuery">
					<desc>The jQuery object representing the element to be resized</desc>
				</property>
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper that's being resized</desc>
				</property>
				<property name="originalElement" type="jQuery">
					<desc>The jQuery object representing the original element before it is wrapped</desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The position represented as <code>{ left, top }</code> before the resizable is resized</desc>
				</property>
				<property name="originalSize" type="Object">
					<desc>The size represented as <code>{ width, height }</code> before the resizable is resized</desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position represented as <code>{ left, top }</code></desc>
				</property>
				<property name="size" type="Object">
					<desc>The current size represented as <code>{ width, height }</code></desc>
				</property>
			</argument>
		</event>
		<event name="stop">
			<desc>This event is triggered at the end of a resize operation.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="element" type="jQuery">
					<desc>The jQuery object representing the element to be resized</desc>
				</property>
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper that's being resized</desc>
				</property>
				<property name="originalElement" type="jQuery">
					<desc>The jQuery object representing the original element before it is wrapped</desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The position represented as <code>{ left, top }</code> before the resizable is resized</desc>
				</property>
				<property name="originalSize" type="Object">
					<desc>The size represented as <code>{ width, height }</code> before the resizable is resized</desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position represented as <code>{ left, top }</code></desc>
				</property>
				<property name="size" type="Object">
					<desc>The current size represented as <code>{ width, height }</code></desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="destroy">
	<desc>
		Removes the resizable functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the resizable.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the resizable.
	</desc>
</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the resizable.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current resizable options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the resizable option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the resizable.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the resizable element.
	</desc>
</method>
	</methods>
	<example>
		<desc>A simple jQuery UI Resizable.</desc>
		<css>
	#resizable {
		width: 100px;
		height: 100px;
		background: #ccc;
}</css>
		<code>
$( "#resizable" ).resizable();
</code>
		<html>
&lt;div id="resizable"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="interactions"/>
</entry><entry name="scale" type="effect">
	<title>Scale Effect</title>
	<desc>
		Shrink or grow an element by a percentage factor.
	</desc>
	<arguments>
		<argument name="direction" type="String" default="&quot;both&quot;">
			<desc>The direction of the effect. Possible values: <code>"both"</code>, <code>"vertical"</code> or <code>"horizontal"</code>.</desc>
		</argument>
		<argument name="origin" type="Array" default="[ &quot;middle&quot;, &quot;center&quot; ]">
			<desc>The vanishing point.</desc>
		</argument>
		<argument name="percent" type="Number">
			<desc>The percentage to scale to.</desc>
		</argument>
		<argument name="scale" type="String" default="&quot;both&quot;">
			<desc>Which areas of the element will be resized: <code>"both"</code>, <code>"box"</code>, <code>"content"</code>. Box resizes the border and padding of the element; content resizes any content inside of the element.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the scale effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "scale" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<example>
		<height>200</height>
		<desc>Toggle a div using the scale effect in just one direction.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle({ effect: "scale", direction: "horizontal" });
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry type="method" name="scrollParent" return="jQuery">
	<title>.scrollParent()</title>
	<desc>Get the closest ancestor element that is scrollable.</desc>
	<longdesc>
		<p>This method finds the nearest ancestor that allows scrolling. In other words, the <code>.scrollParent()</code> method finds the element that the currently selected element will scroll within.</p>
		<p><em>Note: This method only works on jQuery objects containing one element.</em></p>
	</longdesc>
	<signature/>
	<category slug="methods"/>
	<category slug="ui-core"/>
</entry><entry name="selectable" type="widget" widget-element="selectable element">
	<title>Selectable Widget</title>
	<desc>Use the mouse to select elements, individually or in a group.</desc>
	<longdesc>
		<p>The jQuery UI Selectable plugin allows for elements to be selected by dragging a box (sometimes called a lasso) with the mouse over the elements. Elements can also be selected via click or drag while holding the ctrl/meta key, allowing for multiple (non-contiguous) selections.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/mouse/">Mouse Interaction</a></li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.0</added>
	<options>
		<option name="appendTo" type="Selector" default="&quot;body&quot;" example-value="&quot;#someElem&quot;">
			<desc>Which element the selection helper (the lasso) should be appended to.</desc>
		</option>
		<option name="autoRefresh" type="Boolean" default="true" example-value="false">
			<desc>This determines whether to refresh (recalculate) the position and size of each selectee at the beginning of each select operation. If you have many items, you may want to set this to false and call the <a href="#method-refresh"><code>refresh()</code></a> method manually.</desc>
		</option>
		<option name="cancel" type="Selector" default="&quot;input,textarea,button,select,option&quot;" example-value="&quot;a,.cancel&quot;">
			<desc>Prevents selecting if you start on elements matching the selector.</desc>
		</option>
		<option name="delay" type="Integer" default="0" example-value="150">
			<desc>Time in milliseconds to define when the selecting should start. This helps prevent unwanted selections when clicking on an element.</desc>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the selectable if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="distance" type="Number" default="0" example-value="30">
			<desc>Tolerance, in pixels, for when selecting should start. If specified, selecting will not start until the mouse has been dragged beyond the specified distance.</desc>
		</option>
		<option name="filter" type="Selector" default="&quot;*&quot;" example-value="&quot;li&quot;">
			<desc>The matching child elements will be made selectees (able to be selected).</desc>
		</option>
		<option name="tolerance" type="String" default="&quot;touch&quot;" example-value="&quot;fit&quot;">
			<desc>
				Specifies which mode to use for testing whether the lasso should select an item. Possible values:
				<ul>
					<li><code>"fit"</code>: Lasso overlaps the item entirely.</li>
					<li><code>"touch"</code>: Lasso overlaps the item by any amount.</li>
				</ul>
			</desc>
		</option>
	</options>
	<events>
		<event name="create">
	<desc>
		Triggered when the selectable is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="selected">
			<desc>Triggered at the end of the select operation, on each element added to the selection.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="selected" type="Element">
					<desc>The selectable item that has been selected.</desc>
				</property>
			</argument>
		</event>
		<event name="selecting">
			<desc>Triggered during the select operation, on each element added to the selection.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="selecting" type="Element">
					<desc>The current selectable item being selected.</desc>
				</property>
			</argument>
		</event>
		<event name="start">
			<desc>Triggered at the beginning of the select operation.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="stop">
			<desc>Triggered at the end of the select operation.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="unselected">
			<desc>Triggered at the end of the select operation, on each element removed from the selection.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="unselected" type="Element">
					<desc>The selectable item that has been unselected.</desc>
				</property>
			</argument>
		</event>
		<event name="unselecting">
			<desc>Triggered during the select operation, on each element removed from the selection.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="unselecting" type="Element">
					<desc>The current selectable item being unselected.</desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="destroy">
	<desc>
		Removes the selectable functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the selectable.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the selectable.
	</desc>
</method>
		<method name="refresh">
			<desc>Refresh the position and size of each selectee element. This method can be used to manually recalculate the position and size of each selectee when the <a href="#option-autoRefresh"><code>autoRefresh</code></a> option is set to <code>false</code>.</desc>
		</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the selectable.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current selectable options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the selectable option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the selectable.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the selectable element.
	</desc>
</method>
	</methods>
	<example>
		<height>150</height>
		<desc>A simple jQuery UI Selectable.</desc>
		<css>
	#selectable .ui-selecting {
		background: #ccc;
	}
	#selectable .ui-selected {
		background: #999;
	}
</css>
		<code>
$( "#selectable" ).selectable();
</code>
		<html>
&lt;ul id="selectable"&gt;
	&lt;li&gt;Item 1&lt;/li&gt;
	&lt;li&gt;Item 2&lt;/li&gt;
	&lt;li&gt;Item 3&lt;/li&gt;
	&lt;li&gt;Item 4&lt;/li&gt;
	&lt;li&gt;Item 5&lt;/li&gt;
&lt;/ul&gt;
</html>
	</example>
	<category slug="interactions"/>
</entry><entry name="shake" type="effect">
	<title>Shake Effect</title>
	<desc>Shakes the element multiple times, vertically or horizontally.</desc>
	<arguments>
		<argument name="direction" type="String" default="&quot;both&quot;">
			<desc>The direction of the effect. Possible values: <code>"left"</code>, <code>"right"</code>, <code>"up"</code>, <code>"down"</code>.</desc>
		</argument>
		<argument name="distance" type="Number" default="20">
			<desc>Distance to shake.</desc>
		</argument>
		<argument name="times" type="Integer" default="3">
			<desc>Times to shake.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Shake a div.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).effect( "shake" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to shake the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="show" type="method" return="jQuery">
	<title>.show()</title>
	<desc>Display the matched elements, using custom effects.</desc>
	<longdesc>
		<p>This plugin extends jQuery's built-in  method. If jQuery UI is not loaded, calling the <code>.show()</code> method may not fail directly, as the method still exists. However, the expected behavior will not occur.</p>
	</longdesc>
	<signature>
		<argument name="effect" type="String">
			<desc>A string indicating which <a href="/category/effects/">effect</a> to use for the transition.</desc>
		</argument>
		<argument name="options" type="Object" optional="true">
			<desc>Effect-specific settings and <a href="/easings/">easing</a>.</desc>
		</argument>
		<argument name="duration" default="400" optional="true">
	<desc>A string or number determining how long the animation will run.</desc>
	<type name="Number">
		<desc>The duration in milliseconds.</desc>
	</type>
	<type name="String">
		<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
	</type>
</argument>
		<argument name="complete" type="Function" optional="true">
	<desc>A function to call once the animation is complete.</desc>
</argument>
	</signature>
	<signature>
	<argument name="options" type="Object">
		<desc>All animation settings. The only required property is <code>effect</code>.</desc>
		<property name="effect" type="String">
			<desc>A string indicating which <a href="/category/effect/">effect</a> to use for the transition.</desc>
		</property>
		<property name="easing" type="String" default="&quot;swing&quot;">
			<desc>A string indicating which <a href="/easings/">easing</a> function to use for the transition.</desc>
		</property>
		<property name="duration" default="400">
			<desc>A string or number determining how long the animation will run.</desc>
			<type name="Number">
				<desc>The duration in milliseconds.</desc>
			</type>
			<type name="String">
				<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
			</type>
		</property>
		<property name="complete" type="Function">
			<desc>A function to call once the animation is complete.</desc>
		</property>
	</argument>
</signature>
	<example>
		<height>150</height>
		<desc>Show a div using the fold effect.</desc>
		<css>
	div {
		display: none;
		width: 100px;
		height: 100px;
		background: #ccc;
		border: 1px solid #000;
	}
</css>
		<html>
&lt;button&gt;show the div&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</html>
		<code>
$( "button" ).click(function() {
	$( "div" ).show( "fold", 1000 );
});
</code>
	</example>
	<category slug="methods"/>
	<category slug="effects"/>
	<category slug="effects-core"/>
	<category slug="overrides"/>
</entry><entry name="size" type="effect">
	<title>Size Effect</title>
	<desc>Resize an element to a specified width and height.</desc>
	<arguments>
		<argument name="to" type="Object">
			<desc>Height and width to resize to.</desc>
		</argument>
		<argument name="origin" type="Array" default="[ &quot;top&quot;, &quot;left&quot; ]">
			<desc>The vanishing point.</desc>
		</argument>
		<argument name="scale" type="String" default="&quot;both&quot;">
			<desc>Which areas of the element will be resized: <code>"both"</code>, <code>"box"</code>, <code>"content"</code>. Box resizes the border and padding of the element; content resizes any content inside of the element.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Resize the element using the size effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).effect( "size", {
		to: { width: 200, height: 60 }
	}, 1000 );
});
</code>
		<html>
&lt;p&gt;Click anywhere to resize the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="slide" type="effect">
	<title>Slide Effect</title>
	<desc>Slides the element out of the viewport.</desc>
	<arguments>
		<argument name="direction" type="String" default="&quot;both&quot;">
			<desc>The direction of the effect. Possible values: <code>"left"</code>, <code>"right"</code>, <code>"up"</code>, <code>"down"</code>.</desc>
		</argument>
		<argument name="distance" type="Number" default="element's outerWidth">
			<desc>The distance of the effect. Defaults to either the height or width of the element depending on the <code>direction</code> argument. Can be set to any integer less than the width/height of the element.</desc>
		</argument>
	</arguments>
	<example>
		<height>200</height>
		<desc>Toggle a div using the slide effect.</desc>
		<css>
	#toggle {
		width: 100px;
		height: 100px;
		background: #ccc;
	}
</css>
		<code>
$( document ).click(function() {
	$( "#toggle" ).toggle( "slide" );
});
</code>
		<html>
&lt;p&gt;Click anywhere to toggle the box.&lt;/p&gt;
&lt;div id="toggle"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry name="slider" type="widget" widget-element="slider" event-prefix="slide">
	<title>Slider Widget</title>
	<desc>Drag a handle to select a numeric value.</desc>
	<longdesc>
		<p>The jQuery UI Slider plugin makes selected elements into sliders. There are various options such as multiple handles and ranges. The handle can be moved with the mouse or the arrow keys.</p>

		<p>The slider widget will create handle elements with the class <code>ui-slider-handle</code> on initialization. You can specify custom handle elements by creating and appending the elements and adding the <code>ui-slider-handle</code> class before initialization. It will only create the number of handles needed to match the length of <a href="#option-value"><code>value</code></a>/<a href="#option-values"><code>values</code></a>. For example, if you specify <code>values: [ 1, 5, 18 ]</code> and create one custom handle, the plugin will create the other two.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/mouse/">Mouse Interaction</a></li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.5</added>
	<options>
		<option name="animate" default="false" example-value="&quot;fast&quot;">
			<desc>Whether to slide the handle smoothly when the user clicks on the slider track. Also accepts any valid <a href="//api.jquery.com/animate/#duration">animation duration</a>.</desc>
			<type name="Boolean">
				<desc>When set to <code>true</code>, the handle will animate with the default duration.</desc>
			</type>
			<type name="String">
				<desc>The name of a speed, such as <code>"fast"</code> or <code>"slow"</code>.</desc>
			</type>
			<type name="Number">
				<desc>The duration of the animation, in milliseconds.</desc>
			</type>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the slider if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="max" type="Number" default="100" example-value="50">
			<desc>The maximum value of the slider.</desc>
		</option>
		<option name="min" type="Number" default="0" example-value="10">
			<desc>The minimum value of the slider.</desc>
		</option>
		<option name="orientation" type="String" default="&quot;horizontal&quot;" example-value="&quot;vertical&quot;">
			<desc>Determines whether the slider handles move horizontally (min on left, max on right) or vertically (min on bottom, max on top). Possible values: <code>"horizontal"</code>, <code>"vertical"</code>.</desc>
		</option>
		<option name="range" default="false" example-value="true">
			<desc>Whether the slider represents a range.</desc>
			<type name="Boolean">
				<desc>If set to <code>true</code>, the slider will detect if you have two handles and create a styleable range element between these two.</desc>
			</type>
			<type name="String">
				<desc>Either <code>"min"</code> or <code>"max"</code>. A min range goes from the slider min to one handle. A max range goes from one handle to the slider max.</desc>
			</type>
		</option>
		<option name="step" type="Number" default="1" example-value="5">
			<desc>Determines the size or amount of each interval or step the slider takes between the min and max. The full specified value range of the slider (max - min) should be evenly divisible by the step.</desc>
		</option>
		<option name="value" type="Number" default="0" example-value="10">
			<desc>Determines the value of the slider, if there's only one handle. If there is more than one handle, determines the value of the first handle.</desc>
		</option>
		<option name="values" type="Array" default="null" example-value="[ 10, 25 ]">
			<desc>This option can be used to specify multiple handles. If the <a href="#option-range"><code>range</code></a> option is set to <code>true</code>, the length of <code>values</code> should be 2.</desc>
		</option>
	</options>
	<events>
		<event name="create">
	<desc>
		Triggered when the slider is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="start">
			<desc>Triggered when the user starts sliding.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="handle" type="jQuery">
					<desc>The jQuery object representing the handle being moved.</desc>
				</property>
				<property name="value" type="Number">
					<desc>The current value of the slider.</desc>
				</property>
			</argument>
		</event>
		<event name="slide">
			<desc>Triggered on every mouse move during slide. The value provided in the event as <code>ui.value</code> represents the value that the handle will have as a result of the current movement. Canceling the event will prevent the handle from moving and the handle will continue to have its previous value.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="handle" type="jQuery">
					<desc>The jQuery object representing the handle being moved.</desc>
				</property>
				<property name="value" type="Number">
					<desc>The value that the handle will move to if the event is not canceled.</desc>
				</property>
				<property name="values" type="Array">
					<desc>An array of the current values of a multi-handled slider.</desc>
				</property>
			</argument>
		</event>
		<event name="change">
			<desc>Triggered after the user slides a handle, if the value has changed; or if the value is changed programmatically via the <a href="#method-value"><code>value</code></a> method.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="handle" type="jQuery">
					<desc>The jQuery object representing the handle that was changed.</desc>
				</property>
				<property name="value" type="Number">
					<desc>The current value of the slider.</desc>
				</property>
			</argument>
		</event>
		<event name="stop">
			<desc>Triggered after the user slides a handle.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="handle" type="jQuery">
					<desc>The jQuery object representing the handle that was moved.</desc>
				</property>
				<property name="value" type="Number">
					<desc>The current value of the slider.</desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="destroy">
	<desc>
		Removes the slider functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the slider.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the slider.
	</desc>
</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the slider.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current slider options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the slider option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the slider.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="value">
			<desc>Get or set the value of the slider.</desc>
			<signature return="Number" example-return-var="selection">
				<desc>Get the value of the slider.</desc>
			</signature>
			<signature example-params="55">
				<desc>Set the value of the slider.</desc>
				<argument name="value" type="Number">
					<desc>The value to set.</desc>
				</argument>
			</signature>
		</method>
		<method name="values">
			<desc>Get or set the handle value(s).</desc>
			<signature return="Array" example-return-var="values">
				<desc>Get the value for all handles.</desc>
			</signature>
			<signature return="Number" example-return-var="value" example-params="0">
				<desc>Get the value for the specified handle.</desc>
				<argument name="index" type="Integer">
					<desc>The zero-based index of the handle.</desc>
				</argument>
			</signature>
			<signature example-params="0, 55">
				<desc>Set the value for the specified handle.</desc>
				<argument name="index" type="Integer">
					<desc>The zero-based index of the handle.</desc>
				</argument>
				<argument name="value" type="Number">
					<desc>The value to set.</desc>
				</argument>
			</signature>
			<signature example-params="[ 55, 105 ]">
				<desc>Set the value for all handles.</desc>
				<argument name="values" type="Array">
					<desc>The values to set.</desc>
				</argument>
			</signature>
		</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the slider.
	</desc>
</method>
	</methods>
	<example>
		<height>50</height>
		<desc>A simple jQuery UI Slider.</desc>
		<css>#slider { margin: 10px; }</css>
		<code>
$( "#slider" ).slider();
</code>
		<html>
&lt;div id="slider"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="sortable" type="widget" widget-element="sortable element" event-prefix="sort">
	<title>Sortable Widget</title>
	<desc>Reorder elements in a list or grid using the mouse.</desc>
	<longdesc>
		<p>The jQuery UI Sortable plugin makes selected elements sortable by dragging with the mouse.</p>
		<p><em>Note: In order to sort table rows, the <code>tbody</code> must be made sortable, not the <code>table</code>.</em></p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/mouse/">Mouse Interaction</a></li>
		</ul>
	</longdesc>
	<added>1.0</added>
	<options>
		<option name="appendTo" default="&quot;parent&quot;" example-value="document.body">
			<desc>Defines where the helper that moves with the mouse is being appended to during the drag (for example, to resolve overlap/zIndex issues).</desc>
			<type name="jQuery">
				<desc>A jQuery object containing the element to append the helper to.</desc>
			</type>
			<type name="Element">
				<desc>The element to append the helper to.</desc>
			</type>
			<type name="Selector">
				<desc>A selector specifying which element to append the helper to.</desc>
			</type>
			<type name="String">
				<desc>The string <code>"parent"</code> will cause the helper to be a sibling of the sortable item.</desc>
			</type>
		</option>
		<option name="axis" type="String" default="false" example-value="&quot;x&quot;">
			<desc>If defined, the items can be dragged only horizontally or vertically. Possible values: <code>"x"</code>, <code>"y"</code>.</desc>
		</option>
		<option name="cancel" type="Selector" default="&quot;:input,button&quot;" example-value="&quot;a,button&quot;">
			<desc>Prevents sorting if you start on elements matching the selector.</desc>
		</option>
		<option name="connectWith" type="Selector" default="false" example-value="&quot;#shopping-cart&quot;">
			<desc>A selector of other sortable elements that the items from this list should be connected to. This is a one-way relationship, if you want the items to be connected in both directions, the <code>connectWith</code> option must be set on both sortable elements.</desc>
		</option>
		<option name="containment" default="false" example-value="&quot;parent&quot;">
			<desc>
				<p>Defines a bounding box that the sortable items are constrained to while dragging.</p>

				<p>Note: The element specified for containment must have a calculated width and height (though it need not be explicit). For example, if you have <code>float: left</code> sortable children and specify <code>containment: "parent"</code> be sure to have <code>float: left</code> on the sortable/parent container as well or it will have <code>height: 0</code>, causing undefined behavior.</p>
			</desc>
			<type name="Element">
				<desc>An element to use as the container.</desc>
			</type>
			<type name="Selector">
				<desc>A selector specifying an element to use as the container.</desc>
			</type>
			<type name="String">
				<desc>A string identifying an element to use as the container. Possible values: <code>"parent"</code>, <code>"document"</code>, <code>"window"</code>.</desc>
			</type>
		</option>
		<option name="cursor" type="String" default="&quot;auto&quot;" example-value="&quot;move&quot;">
			<desc>Defines the cursor that is being shown while sorting.</desc>
		</option>
		<option name="cursorAt" type="Object" default="false" example-value="{ left: 5 }">
			<desc>Moves the sorting element or helper so the cursor always appears to drag from the same position. Coordinates can be given as a hash using a combination of one or two keys: <code>{ top, left, right, bottom }</code>.</desc>
		</option>
		<option name="delay" type="Integer" default="0" example-value="150">
			<desc>Time in milliseconds to define when the sorting should start. Adding a delay helps preventing unwanted drags when clicking on an element.</desc>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the sortable if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="distance" type="Number" default="1" example-value="5">
			<desc>Tolerance, in pixels, for when sorting should start. If specified, sorting will not start until after mouse is dragged beyond distance. Can be used to allow for clicks on elements within a handle.</desc>
		</option>
		<option name="dropOnEmpty" type="Boolean" default="true" example-value="false">
			<desc>If <code>false</code>, items from this sortable can't be dropped on an empty connect sortable (see the <a href="#option-connectWith"><code>connectWith</code></a> option.</desc>
		</option>
		<option name="forceHelperSize" type="Boolean" default="false" example-value="true">
			<desc>If <code>true</code>, forces the helper to have a size.</desc>
		</option>
		<option name="forcePlaceholderSize" type="Boolean" default="false" example-value="true">
			<desc>If true, forces the placeholder to have a size.</desc>
		</option>
		<option name="grid" type="Array" default="false" example-value="[ 20, 10 ]">
			<desc>Snaps the sorting element or helper to a grid, every x and y pixels. Array values: <code>[ x, y ]</code>.</desc>
		</option>
		<option name="handle" default="false" example-value="&quot;.handle&quot;">
			<desc>Restricts sort start click to the specified element.</desc>
			<type name="Selector"/>
			<type name="Element"/>
		</option>
		<option name="helper" default="&quot;original&quot;" example-value="&quot;clone&quot;">
			<desc>Allows for a helper element to be used for dragging display.</desc>
			<type name="String">
				<desc>If set to <code>"clone"</code>, then the element will be cloned and the clone will be dragged.</desc>
			</type>
			<type name="Function">
				<desc>A function that will return a DOMElement to use while dragging. The function receives the event and the element being sorted.</desc>
			</type>
		</option>
		<option name="items" type="Selector" default="&quot;&gt; *&quot;" example-value="&quot;&gt; li&quot;">
			<desc>Specifies which items inside the element should be sortable.</desc>
		</option>
		<option name="opacity" type="Number" default="false" example-value="0.5">
			<desc>Defines the opacity of the helper while sorting. From <code>0.01</code> to <code>1</code>.</desc>
		</option>
		<option name="placeholder" type="String" default="false" example-value="&quot;sortable-placeholder&quot;">
			<desc>A class name that gets applied to the otherwise white space.</desc>
		</option>
		<option name="revert" default="false" example-value="true">
			<desc>Whether the sortable items should revert to their new positions using a smooth animation.</desc>
			<type name="Boolean">
				<desc>When set to <code>true</code>, the items will animate with the default duration.</desc>
			</type>
			<type name="Number">
				<desc>The duration for the animation, in milliseconds.</desc>
			</type>
		</option>
		<option name="scroll" type="Boolean" default="true" example-value="false">
			<desc>If set to true, the page scrolls when coming to an edge.</desc>
		</option>
		<option name="scrollSensitivity" type="Number" default="20" example-value="10">
			<desc>Defines how near the mouse must be to an edge to start scrolling.</desc>
		</option>
		<option name="scrollSpeed" type="Number" default="20" example-value="40">
			<desc>The speed at which the window should scroll once the mouse pointer gets within the <a href="#option-scrollSensitivity"><code>scrollSensitivity</code></a> distance.</desc>
		</option>
		<option name="tolerance" type="String" default="&quot;intersect&quot;" example-value="&quot;pointer&quot;">
			<desc>
				Specifies which mode to use for testing whether the item being moved is hovering over another item. Possible values:
				<ul>
					<li><code>"intersect"</code>: The item overlaps the other item by at least 50%.</li>
					<li><code>"pointer"</code>: The mouse pointer overlaps the other item.</li>
				</ul>
			</desc>
		</option>
		<option name="zIndex" type="Integer" default="1000" example-value="9999">
			<desc>Z-index for element/helper while being sorted.</desc>
		</option>
	</options>
	<events>
		<event name="create">
	<desc>
		Triggered when the sortable is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="start">
			<desc>This event is triggered when sorting starts.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="sort">
			<desc>This event is triggered during sorting.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="change">
			<desc>This event is triggered during sorting, but only when the DOM position has changed.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="beforeStop">
			<desc>This event is triggered when sorting stops, but when the placeholder/helper is still available.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="stop">
			<desc>This event is triggered when sorting has stopped.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="update">
			<desc>This event is triggered when the user stopped sorting and the DOM position has changed.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="receive">
			<desc>This event is triggered when a connected sortable list has received an item from another list.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="remove">
			<desc>This event is triggered when a sortable item has been dragged out from the list and into another.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="over">
			<desc>This event is triggered when a sortable item is moved into a connected list.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="out">
			<desc>
				<p>This event is triggered when a sortable item is moved away from a connected list.</p>
				<p><em>Note: This event is also triggered when a sortable item is dropped.</em></p>
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="activate">
			<desc>This event is triggered when using connected lists, every connected list on drag start receives it.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
		<event name="deactivate">
			<desc>This event is triggered when sorting was stopped, is propagated to all possible connected lists.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="helper" type="jQuery">
					<desc>The jQuery object representing the helper being sorted</desc>
				</property>
				<property name="item" type="jQuery">
					<desc>The jQuery object representing the current dragged element</desc>
				</property>
				<property name="offset" type="Object">
					<desc>The current absolute position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="position" type="Object">
					<desc>The current position of the helper represented as <code>{ top, left }</code></desc>
				</property>
				<property name="originalPosition" type="Object">
					<desc>The original position of the element represented as <code>{ top, left }</code></desc>
				</property>
				<property name="sender" type="jQuery">
					<desc>The sortable that the item comes from if moving from one sortable to another</desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="cancel">
			<desc>Cancels a change in the current sortable and reverts it to the state prior to when the current sort was started. Useful in the stop and receive callback functions.</desc>
		</method>
		<method name="destroy">
	<desc>
		Removes the sortable functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the sortable.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the sortable.
	</desc>
</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the sortable.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current sortable options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the sortable option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the sortable.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="refresh">
			<desc>Refresh the sortable items. Triggers the reloading of all sortable items, causing new items to be recognized.</desc>
		</method>
		<method name="refreshPositions">
			<desc>Refresh the cached positions of the sortable items. Calling this method refreshes the cached item positions of all sortables.</desc>
		</method>
		<method name="serialize" return="String" example-return-var="sorted" example-params="{ key: &quot;sort&quot; }">
			<desc>
				<p>Serializes the sortable's item <code>id</code>s into a form/ajax submittable string. Calling this method produces a hash that can be appended to any url to easily submit a new item order back to the server.</p>

				<p>It works by default by looking at the <code>id</code> of each item in the format <code>"setname_number"</code>, and it spits out a hash like <code>"setname[]=number&amp;setname[]=number"</code>.</p>

				<p><em>Note: If serialize returns an empty string, make sure the <code>id</code> attributes include an underscore.  They must be in the form: <code>"set_number"</code> For example, a 3 element list with <code>id</code> attributes <code>"foo_1"</code>, <code>"foo_5"</code>, <code>"foo_2"</code> will serialize to <code>"foo[]=1&amp;foo[]=5&amp;foo[]=2"</code>. You can use an underscore, equal sign or hyphen to separate the set and number. For example <code>"foo=1"</code>, <code>"foo-1"</code>, and <code>"foo_1"</code> all serialize to <code>"foo[]=1"</code>.</em></p>
			</desc>
			<argument name="options" type="Object">
				<desc>Options to customize the serialization.</desc>
				<property name="key" type="String" default="the part of the attribute in front of the separator">
					<desc>Replaces <code>part1[]</code> with the specified value.</desc>
				</property>
				<property name="attribute" type="String" default="&quot;id&quot;">
					<desc>The name of the attribute to use for the values.</desc>
				</property>
				<property name="expression" type="RegExp" default="/(.+)[-=_](.+)/">
					<desc>A regular expression used to split the attribute value into key and value parts.</desc>
				</property>
			</argument>
		</method>
		<method name="toArray" return="Array" example-return-var="sortedIDs">
			<desc>Serializes the sortable's item id's into an array of string.</desc>
			<argument name="options" type="Object">
				<desc>Options to customize the serialization.</desc>
				<property name="attribute" type="String" default="&quot;id&quot;">
					<desc>The name of the attribute to use for the values.</desc>
				</property>
			</argument>
		</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the sortable element.
	</desc>
</method>
	</methods>
	<example>
		<height>150</height>
		<desc>A simple jQuery UI Sortable.</desc>
		<code>$("#sortable").sortable();</code>
		<html>
&lt;ul id="sortable"&gt;
	&lt;li&gt;Item 1&lt;/li&gt;
	&lt;li&gt;Item 2&lt;/li&gt;
	&lt;li&gt;Item 3&lt;/li&gt;
	&lt;li&gt;Item 4&lt;/li&gt;
	&lt;li&gt;Item 5&lt;/li&gt;
&lt;/ul&gt;
</html>
	</example>
	<category slug="interactions"/>
</entry><entry name="spinner" type="widget" widget-element="generated wrapper" event-prefix="spin">
	<title>Spinner Widget</title>
	<desc>
		Enhance a text input for entering numeric values, with up/down buttons and arrow key handling.
	</desc>
	<longdesc>
		<p>Spinner, or number stepper, widget is perfect for handling all kinds of numeric input. It allow users to type a value directly or modify an existing value by spinning with the keyboard, mouse or scrollwheel. When combined with Globalize, you can even spin currencies and dates in a variety of locales.</p>

		<p>Spinner wraps a text input, adds two buttons to increment and decrement the current value, along with handling key events for the same purpose. It delegates to <a href="https://github.com/jquery/globalize">Globalize</a> for number formatting and parsing.</p>

		<h3>Keyboard interaction</h3>

		<ul>
			<li>UP: Increment the value by one step.</li>
			<li>DOWN: Decrement the value by one step.</li>
			<li>PAGE UP: Increment the value by one page.</li>
			<li>PAGE DOWN: Decrement the value by one page.</li>
		</ul>

		<p>Focus stays in the text field, even after using the mouse to click one of the spin buttons.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/button/">Button</a></li>
			<li><a href="https://github.com/jquery/globalize">Globalize</a> (external, optional; for use with the <a href="#option-culture"><code>culture</code></a> and <a href="#option-numberFormat"><code>numberFormat</code></a> options)</li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<note>
			This widget manipulates its element's value programmatically, therefore a native change may not be fired when the element's value changes.
		</note>
	<added>1.9</added>
	<options>
		<option name="culture" type="String" default="null" example-value="&quot;fr&quot;">
			<desc>Sets the culture to use for parsing and formatting the value. If <code>null</code>, the currently set culture in <code>Globalize</code> is used, see <a href="https://github.com/jquery/globalize">Globalize docs</a> for available cultures. Only relevant if the <a href="#option-numberFormat"><code>numberFormat</code></a> option is set. Requires <a href="https://github.com/jquery/globalize">Globalize</a> to be included.</desc>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the spinner if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="icons" type="Object" default="{ down: &quot;ui-icon-triangle-1-s&quot;, up: &quot;ui-icon-triangle-1-n&quot; }" example-value="{ down: &quot;custom-down-icon&quot;, up: &quot;custom-up-icon&quot; }">
			<desc>
				Icons to use for buttons, matching an icon defined by the jQuery UI CSS Framework.
				<ul>
					<li>up (string, default: "ui-icon-triangle-1-n")</li>
					<li>down (string, default: "ui-icon-triangle-1-s")</li>
				</ul>
			</desc>
		</option>
		<option name="incremental" default="true" example-value="false">
			<desc>Controls the number of steps taken when holding down a spin button.</desc>
			<type name="Boolean">
				<desc>When set to <code>true</code>, the stepping delta will increase when spun incessantly. When set to <code>false</code>, all steps are equal (as defined by the <a href="#option-step"><code>step</code></a> option).</desc>
			</type>
			<type name="Function">
				<argument name="count" type="Integer"/>
				<desc>Receives one parameter: the number of spins that have occurred. Must return the number of steps that should occur for the current spin.</desc>
			</type>
		</option>
		<option name="max" default="null" example-value="50">
			<desc>The maximum allowed value. The element's <code>max</code> attribute is used if it exists and the option is not explicitly set. If <code>null</code>, there is no maximum enforced.</desc>
			<type name="Number">
				<desc>The maximum value.</desc>
			</type>
			<type name="String">
				<desc>If <a href="https://github.com/jquery/globalize">Globalize</a> is included, the <code>max</code> option can be passed as a string which will be parsed based on the <a href="#opiton-numberFormat"><code>numberFormat</code></a> and <a href="#option-culture"><code>culture</code></a> options; otherwise it will fall back to the native <code>parseFloat()</code> method.</desc>
			</type>
		</option>
		<option name="min" default="null" example-value="0">
			<desc>The minimum allowed value. The element's <code>min</code> attribute is used if it exists and the option is not explicitly set. If <code>null</code>, there is no minimum enforced.</desc>
			<type name="Number">
				<desc>The minimum value.</desc>
			</type>
			<type name="String">
				<desc>If <a href="https://github.com/jquery/globalize">Globalize</a> is included, the <code>min</code> option can be passed as a string which will be parsed based on the <a href="#opiton-numberFormat"><code>numberFormat</code></a> and <a href="#option-culture"><code>culture</code></a> options; otherwise it will fall back to the native <code>parseFloat()</code> method.</desc>
			</type>
		</option>
		<option name="numberFormat" type="String" default="null" example-value="&quot;n&quot;">
			<desc>Format of numbers passed to  <a href="https://github.com/jquery/globalize"><code>Globalize</code></a>, if available. Most common are <code>"n"</code> for a decimal number and <code>"C"</code> for a currency value. Also see the <a href="#option-culture"><code>culture</code></a> option.</desc>
		</option>
		<option name="page" type="Number" default="10" example-value="5">
			<desc>The number of steps to take when paging via the <a href="#method-pageUp"><code>pageUp</code></a>/<a href="#method-pageDown"><code>pageDown</code></a> methods.</desc>
		</option>
		<option name="step" default="1" example-value="2">
			<desc>The size of the step to take when spinning via buttons or via the <a href="#method-stepUp"><code>stepUp()</code></a>/<a href="#method-stepDown"><code>stepDown()</code></a> methods. The element's <code>step</code> attribute is used if it exists and the option is not explicitly set.</desc>
			<type name="Number">
				<desc>The size of the step.</desc>
			</type>
			<type name="String">
				<desc>If <a href="https://github.com/jquery/globalize">Globalize</a> is included, the <code>step</code> option can be passed as a string which will be parsed based on the <a href="#opiton-numberFormat"><code>numberFormat</code></a> and <a href="#option-culture"><code>culture</code></a> options, otherwise it will fall back to the native <code>parseFloat</code>.</desc>
			</type>
		</option>
	</options>
	<methods>
		<method name="destroy">
	<desc>
		Removes the spinner functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the spinner.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the spinner.
	</desc>
</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the spinner.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current spinner options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the spinner option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the spinner.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="pageDown">
			<desc>
				<p>Decrements the value by the specified number of pages, as defined by the <a href="#option-page"><code>page</code></a> option. Without the parameter, a single page is decremented.</p>
				<p>If the resulting value is above the max, below the min, or results in a step mismatch, the value will be adjusted to the closest valid value.</p>
				<p>Invoking <code>pageDown()</code> will cause <a href="#event-start"><code>start</code></a>, <a href="#event-spin"><code>spin</code></a>, and <a href="#event-stop"><code>stop</code></a> events to be triggered.</p>
			</desc>
			<argument name="pages" type="Number" optional="true">
				<desc>Number of pages to decrement, defaults to 1.</desc>
			</argument>
		</method>
		<method name="pageUp" example-params="10">
			<desc>
				<p>Increments the value by the specified number of pages, as defined by the <a href="#option-page"><code>page</code></a> option. Without the parameter, a single page is incremented.</p>
				<p>If the resulting value is above the max, below the min, or results in a step mismatch, the value will be adjusted to the closest valid value.</p>
				<p>Invoking <code>pageUp()</code> will cause <a href="#event-start"><code>start</code></a>, <a href="#event-spin"><code>spin</code></a>, and <a href="#event-stop"><code>stop</code></a> events to be triggered.</p>
			</desc>
			<argument name="pages" type="Number" optional="true">
				<desc>Number of pages to increment, defaults to 1.</desc>
			</argument>
		</method>
		<method name="stepDown">
			<desc>
				<p>Decrements the value by the specified number of steps. Without the parameter, a single step is decremented.</p>
				<p>If the resulting value is above the max, below the min, or results in a step mismatch, the value will be adjusted to the closest valid value.</p>
				<p>Invoking <code>stepDown()</code> will cause <a href="#event-start"><code>start</code></a>, <a href="#event-spin"><code>spin</code></a>, and <a href="#event-stop"><code>stop</code></a> events to be triggered.</p>
			</desc>
			<argument name="steps" type="Number" optional="true">
				<desc>Number of steps to decrement, defaults to 1.</desc>
			</argument>
		</method>
		<method name="stepUp" example-params="5">
			<desc>
				<p>Increments the value by the specified number of steps. Without the parameter, a single step is incremented.</p>
				<p>If the resulting value is above the max, below the min, or results in a step mismatch, the value will be adjusted to the closest valid value.</p>
				<p>Invoking <code>stepUp()</code> will cause <a href="#event-start"><code>start</code></a>, <a href="#event-spin"><code>spin</code></a>, and <a href="#event-stop"><code>stop</code></a> events to be triggered.</p>
			</desc>
			<argument name="steps" type="Number" optional="true">
				<desc>Number of steps to increment, defaults to 1.</desc>
			</argument>
		</method>
		<method name="value">
			<desc>
				Gets or sets the current value as a number.
			</desc>
			<signature return="Number" example-return-var="value">
				<desc>Gets the current value as a number. The value is parsed based on the <a href="#option-numberFormat"><code>numberFormat</code></a> and <a href="#option-culture"><code>culture</code></a> options.</desc>
			</signature>
			<signature example-params="50">
				<argument name="value">
					<desc>The value to set. If passed as a string, the value is parsed based on the <a href="#option-numberFormat"><code>numberFormat</code></a> and <a href="#option-culture"><code>culture</code></a> options.</desc>
					<type name="Number"/>
					<type name="String"/>
				</argument>
			</signature>
		</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the generated wrapper.
	</desc>
</method>
	</methods>
	<events>
		<event name="create">
	<desc>
		Triggered when the spinner is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="start">
			<desc>
				Triggered before a spin. Can be canceled, preventing the spin from occurring.
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="spin">
			<desc>
				Triggered during increment/decrement (to determine direction of spin compare current value with <code>ui.value</code>).
				<p>Can be canceled, preventing the value from being updated.</p>
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="value" type="Number">
					<desc>The new value to be set, unless the event is cancelled.</desc>
				</property>
			</argument>
		</event>
		<event name="stop">
			<desc>Triggered after a spin.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
		<event name="change">
			<desc>
				Triggered when the value of the spinner has changed and the input is no longer focused.
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object"/>
		</event>
	</events>
	<example>
		<height>50</height>
		<desc>Plain number spinner</desc>
		<code>
$( "#spinner" ).spinner();
</code>
		<html>
&lt;input id="spinner"&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="switchClass" type="method" return="jQuery">
	<title>.switchClass()</title>
	<desc>Adds and removes the specified class(es) to each of the set of matched elements while animating all style changes.</desc>
	<longdesc>
		<p>The <code>.switchClass()</code> method allows you to animate the transition of adding and removing classes at the same time.</p>
		<div>
	<p>Similar to native CSS transitions, jQuery UI's class animations provide a smooth transition from one state to another while allowing you to keep all the details about which styles to change in CSS and out of your JavaScript. All class animation methods, including <code>.switchClass()</code>, support custom durations and easings, as well as providing a callback for when the animation completes.</p>
	<p>Not all styles can be animated. For example, there is no way to animate a background image. Any styles that cannot be animated will be changed at the end of the animation.</p>
</div>
		<p>This plugin extends jQuery's built-in  method. If jQuery UI is not loaded, calling the <code>.switchClass()</code> method may not fail directly, as the method still exists. However, the expected behavior will not occur.</p>
	</longdesc>
	<signature>
		<argument name="removeClassName" type="String">
			<desc>One or more class names (space separated) to be removed from the class attribute of each matched element.</desc>
		</argument>
		<argument name="addClassName" type="String">
			<desc>One or more class names (space separated) to be added to the class attribute of each matched element.</desc>
		</argument>
		<argument name="duration" default="400" optional="true">
	<desc>A string or number determining how long the animation will run.</desc>
	<type name="Number">
		<desc>The duration in milliseconds.</desc>
	</type>
	<type name="String">
		<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
	</type>
</argument>
		<argument name="easing" type="String" default="swing" optional="true">
	<desc>A string indicating which <a href="/easings/">easing</a> function to use for the transition.</desc>
</argument>
		<argument name="complete" type="Function" optional="true">
	<desc>A function to call once the animation is complete.</desc>
</argument>
	</signature>
	<example>
		<height>220</height>
		<desc>Adds the class "blue" and removes the class "big" from the matched elements.</desc>
		<css>
	div {
		width: 100px;
		height: 100px;
		background-color: #ccc;
	}
	.big {
		width: 200px;
		height: 200px;
	}
	.blue {
		background-color: #00f;
	}
</css>
		<html>
&lt;div class="big"&gt;&lt;/div&gt;
</html>
		<code>
$( "div" ).click(function() {
	$( this ).switchClass( "big", "blue", 1000, "easeInOutQuad" );
});
</code>
	</example>
	<category slug="effects"/>
	<category slug="effects-core"/>
</entry><entry type="selector" name="tabbable">
	<title>:tabbable Selector</title>
	<sample>:tabbable</sample>
	<signature/>
	<desc>Selects elements which the user can focus via tabbing.</desc>
	<longdesc>
		<p>Some elements are natively tabbable, while others require explicitly setting a positive tab index. In all cases, the element must be visible in order to be tabbable.</p>

		<p>Elements of the following type are tabbable if they do not have a negative tab index and are not disabled: <code>input</code>, <code>select</code>, <code>textarea</code>, <code>button</code>, and <code>object</code>. Anchors are focusable if they have an <code>href</code> or positive <code>tabindex</code> attribute. <code>area</code> elements are focusable if they are inside a named map, have an <code>href</code> attribute, and there is a visible image using the map. All other elements are tabbable based solely on their <code>tabindex</code> attribute and visibility.</p>

		<p><em>Note: Elements with a negative tab index are <a href="/focusable-selector/"><code>:focusable</code></a>, but not <code>:tabbable</code>.</em></p>
	</longdesc>
	<example>
		<height>150</height>
		<desc>Select tabbable elements and highlight them with a red border.</desc>
		<css>
	input {
		border: 1px solid #000;
	}
	div {
		padding: 5px;
	}
</css>
		<html>
&lt;div&gt;&lt;input value="no tabindex"&gt;&lt;/div&gt;
&lt;div&gt;&lt;input tabindex="5" value="positive tabindex"&gt;&lt;/div&gt;
&lt;div&gt;&lt;input tabindex="-1" value="negative tabindex"&gt;&lt;/div&gt;
</html>
		<code>
$( ":tabbable" ).css( "border-color", "red" );
</code>
	</example>
	<category slug="selectors"/>
	<category slug="ui-core"/>
</entry><entry name="tabs" type="widget" animated-element="panel" widget-element="tabs container">
	<title>Tabs Widget</title>
	<desc>A single content area with multiple panels, each associated with a header in a list.</desc>
	<longdesc>
		<p>Tabs are generally used to break content into multiple sections that can be swapped to save space, much like an accordion.</p>

		<p>The content for each tab panel can be defined in-page or can be loaded via Ajax; both are handled automatically based on the <code>href</code> of the anchor associated with the tab. By default tabs are activated on click, but the events can be changed to hover via the <a href="#option-event"><code>event</code></a> option.</p>

		<h3>Keyboard interaction</h3>

		<p>When focus is on a tab, the following key commands are available:</p>
		<ul>
			<li>UP/LEFT: Move focus to the previous tab. If on first tab, moves focus to last tab. Activate focused tab after a short delay.</li>
			<li>DOWN/RIGHT: Move focus to the next tab. If on last tab, moves focus to first tab. Activate focused tab after a short delay.</li>
			<li>HOME: Move focus to the first tab. Activate focused tab after a short delay.</li>
			<li>END: Move focus to the last tab. Activate focused tab after a short delay.</li>
			<li>SPACE: Activate panel associated with focused tab.</li>
			<li>ENTER: Activate or toggle panel associated with focused tab.</li>
			<li>ALT+PAGE UP: Move focus to the previous tab and immediately activate.</li>
			<li>ALT+PAGE DOWN: Move focus to the next tab and immediately activate.</li>
		</ul>

		<p>When focus is in a panel, the following key commands are available:</p>
		<ul>
			<li>CTRL+UP: Move focus to associated tab.</li>
			<li>ALT+PAGE UP: Move focus to the previous tab and immediately activate.</li>
			<li>ALT+PAGE DOWN: Move focus to the next tab and immediately activate.</li>
		</ul>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/category/effects-core/">Effects Core</a> (optional; for use with the <a href="#option-show"><code>show</code></a> and <a href="#option-hide"><code>hide</code></a> options)</li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.0</added>
	<options>
		<option name="active" default="0" example-value="1">
			<desc>
				Which panel is currently open.
			</desc>
			<type name="Boolean">
				<desc>Setting <code>active</code> to <code>false</code> will collapse all panels. This requires the <a href="#option-collapsible"><code>collapsible</code></a> option to be <code>true</code>.</desc>
			</type>
			<type name="Integer">
				<desc>The zero-based index of the panel that is active (open). A negative value selects panels going backward from the last panel.</desc>
			</type>
		</option>
		<option name="collapsible" type="Boolean" default="false" example-value="true">
			<desc>When set to <code>true</code>, the active panel can be closed.</desc>
		</option>
		<option name="disabled" default="false" example-value="[ 0, 2 ]">
			<desc>Which tabs are disabled.</desc>
			<type name="Boolean">
				<desc>Enable or disable all tabs.</desc>
			</type>
			<type name="Array">
				<desc>An array containing the zero-based indexes of the tabs that should be disabled, e.g., <code>[ 0, 2 ]</code> would disable the first and third tab.</desc>
			</type>
		</option>
		<option name="event" type="String" default="&quot;click&quot;" example-value="&quot;mouseover&quot;">
			<desc>The type of event that the tabs should react to in order to activate the tab. To activate on hover, use <code>"mouseover"</code>.</desc>
		</option>
		<option name="heightStyle" type="String" default="&quot;content&quot;" example-value="&quot;fill&quot;">
			<desc>
				Controls the height of the tabs widget and each panel. Possible values:
				<ul>
					<li><code>"auto"</code>: All panels will be set to the height of the tallest panel.</li>
					<li><code>"fill"</code>: Expand to the available height based on the tabs' parent height.</li>
					<li><code>"content"</code>: Each panel will be only as tall as its content.</li>
				</ul>
			</desc>
		</option>
		<option name="hide" default="null" example-value="{ effect: &quot;explode&quot;, duration: 1000 }">
	<desc>If and how to animate the hiding of the panel.</desc>
	<type name="Boolean">
		<desc>
			When set to <code>false</code>, no animation will be used and the panel will be hidden immediately.
			When set to <code>true</code>, the panel will fade out with the default duration and the default easing.
		</desc>
	</type>
	<type name="Number">
		<desc>
			The panel will fade out with the specified duration and the default easing.
		</desc>
	</type>
	<type name="String">
		<desc>
			The panel will be hidden using the specified effect.
			The value can either be the name of a built-in jQuery animation method, such as <code>"slideUp"</code>, or the name of a jQuery UI effect, such as <code>"fold"</code>.
			In either case the effect will be used with the default duration and the default easing.
		</desc>
	</type>
	<type name="Object">
		<desc>If the value is an object, then <code>effect</code>, <code>delay</code>, <code>duration</code>, and <code>easing</code> properties may be provided. If the <code>effect</code> property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If <code>duration</code> or <code>easing</code> is omitted, then the default values will be used. If <code>effect</code> is omitted, then <code>"fadeOut"</code> will be used. If <code>delay</code> is omitted, then no delay is used.</desc>
	</type>
</option>
		<option name="show" default="null" example-value="{ effect: &quot;blind&quot;, duration: 800 }">
	<desc>If and how to animate the showing of the panel.</desc>
	<type name="Boolean">
		<desc>
			When set to <code>false</code>, no animation will be used and the panel will be shown immediately.
			When set to <code>true</code>, the panel will fade in with the default duration and the default easing.
		</desc>
	</type>
	<type name="Number">
		<desc>
			The panel will fade in with the specified duration and the default easing.
		</desc>
	</type>
	<type name="String">
		<desc>
			The panel will be shown using the specified effect.
			The value can either be the name of a built-in jQuery animation method, such as <code>"slideDown"</code>, or the name of a jQuery UI effect, such as <code>"fold"</code>.
			In either case the effect will be used with the default duration and the default easing.
		</desc>
	</type>
	<type name="Object">
		<desc>If the value is an object, then <code>effect</code>, <code>delay</code>, <code>duration</code>, and <code>easing</code> properties may be provided. If the <code>effect</code> property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If <code>duration</code> or <code>easing</code> is omitted, then the default values will be used. If <code>effect</code> is omitted, then <code>"fadeIn"</code> will be used.  If <code>delay</code> is omitted, then no delay is used.</desc>
	</type>
</option>
	</options>
	<events>
		<event name="activate">
			<desc>Triggered after a tab has been activated (after animation completes). If the tabs were previously collapsed, <code>ui.oldTab</code> and <code>ui.oldPanel</code> will be empty jQuery objects. If the tabs are collapsing, <code>ui.newTab</code> and <code>ui.newPanel</code> will be empty jQuery objects.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="newTab" type="jQuery">
					<desc>The tab that was just activated.</desc>
				</property>
				<property name="oldTab" type="jQuery">
					<desc>The tab that was just deactivated.</desc>
				</property>
				<property name="newPanel" type="jQuery">
					<desc>The panel that was just activated.</desc>
				</property>
				<property name="oldPanel" type="jQuery">
					<desc>The panel that was just deactivated.</desc>
				</property>
			</argument>
		</event>
		<event name="beforeActivate">
			<desc>Triggered directly after a tab is activated. Can be canceled to prevent the tab from activating. If the tabs are currently collapsed, <code>ui.oldTab</code> and <code>ui.oldPanel</code> will be empty jQuery objects. If the tabs are collapsing, <code>ui.newTab</code> and <code>ui.newPanel</code> will be empty jQuery objects.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="newTab" type="jQuery">
					<desc>The tab that is about to be activated.</desc>
				</property>
				<property name="oldTab" type="jQuery">
					<desc>The tab that is about to be deactivated.</desc>
				</property>
				<property name="newPanel" type="jQuery">
					<desc>The panel that is about to be activated.</desc>
				</property>
				<property name="oldPanel" type="jQuery">
					<desc>The panel that is about to be deactivated.</desc>
				</property>
			</argument>
		</event>
		<event name="beforeLoad">
			<desc>
				<p>Triggered when a remote tab is about to be loaded, after the <a href="#event-beforeActivate"><code>beforeActivate</code></a> event. Can be canceled to prevent the tab panel from loading content; though the panel will still be activated. This event is triggered just before the Ajax request is made, so modifications can be made to <code>ui.jqXHR</code> and <code>ui.ajaxSettings</code>.</p>
				<p><em>Note: Although <code>ui.ajaxSettings</code> is provided and can be modified, some of these settings have already been processed by jQuery. For example, <a href="http://api.jquery.com/jQuery.ajaxPrefilter/">prefilters</a> have been applied, <code>data</code> has been processed, and <code>type</code> has been determined. The <code>beforeLoad</code> event occurs at the same time, and therefore has the same restrictions, as the <code>beforeSend</code> callback from <a href="http://api.jquery.com/jQuery.ajax/"><code>jQuery.ajax()</code></a>.</em></p>
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="tab" type="jQuery">
					<desc>The tab that is being loaded.</desc>
				</property>
				<property name="panel" type="jQuery">
					<desc>The panel which will be populated by the Ajax response.</desc>
				</property>
				<property name="jqXHR" type="jqXHR">
					<desc>The <code>jqXHR</code> object that is requesting the content.</desc>
				</property>
				<property name="ajaxSettings" type="Object">
					<desc>The settings that will be used by <a href="//api.jquery.com/jQuery.ajax"><code>jQuery.ajax</code></a> to request the content.</desc>
				</property>
			</argument>
		</event>
		<event name="create">
			<desc>Triggered when the tabs are created. If the tabs are collapsed, <code>ui.tab</code> and <code>ui.panel</code> will be empty jQuery objects.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="tab" type="jQuery">
					<desc>The active tab.</desc>
				</property>
				<property name="panel" type="jQuery">
					<desc>The active panel.</desc>
				</property>
			</argument>
		</event>
		<event name="load">
			<desc>Triggered after a remote tab has been loaded.</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="tab" type="jQuery">
					<desc>The tab that was just loaded.</desc>
				</property>
				<property name="panel" type="jQuery">
					<desc>The panel which was just populated by the Ajax response.</desc>
				</property>
			</argument>
		</event>
	</events>
	<methods>
		<method name="destroy">
	<desc>
		Removes the tabs functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
			<signature>
				<desc>Disables all tabs.</desc>
			</signature>
			<signature example-params="1">
				<desc>
					Disables a tab. The selected tab cannot be disabled. To disable more than one tab at once, set the <a href="#option-disabled"><code>disabled</code></a> option: <code>$( "#tabs" ).tabs( "option", "disabled", [ 1, 2, 3 ] )</code>.
				</desc>
				<argument name="index">
					<desc>Which tab to disable.</desc>
					<type name="Number">
						<desc>The zero-based index of the tab to disable.</desc>
					</type>
					<type name="String">
						<desc>The <code>href</code> of the tab to disable.</desc>
					</type>
				</argument>
			</signature>
		</method>
		<method name="enable">
			<signature>
				<desc>Enables all tabs.</desc>
			</signature>
			<signature example-params="1">
				<desc>Enables a tab. To enable more than one tab at once reset the disabled property like: <code>$( "#example" ).tabs( "option", "disabled", [] );</code>.</desc>
				<argument name="index">
					<desc>Which tab to enable.</desc>
					<type name="Number">
						<desc>The zero-based index of the tab to enable.</desc>
					</type>
					<type name="String">
						<desc>The <code>href</code> of the tab to enable.</desc>
					</type>
				</argument>
			</signature>
		</method>
		<method name="load" example-params="1">
			<desc>Loads the panel content of a remote tab.</desc>
			<argument name="index">
				<desc>Which tab to load.</desc>
				<type name="Number">
					<desc>The zero-based index of the tab to load.</desc>
				</type>
				<type name="String">
					<desc>The <code>href</code> of the tab to load.</desc>
				</type>
			</argument>
		</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the tabs.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current tabs options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the tabs option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the tabs.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="refresh">
			<desc>Process any tabs that were added or removed directly in the DOM and recompute the height of the tab panels. Results depend on the content and the <a href="#option-heightStyle"><code>heightStyle</code></a> option.</desc>
		</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the tabs container.
	</desc>
</method>
	</methods>
	<example>
		<desc>A simple jQuery UI Tabs</desc>
		<code>
$( "#tabs" ).tabs();
</code>
		<html>
&lt;div id="tabs"&gt;
	&lt;ul&gt;
		&lt;li&gt;&lt;a href="#fragment-1"&gt;&lt;span&gt;One&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="#fragment-2"&gt;&lt;span&gt;Two&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="#fragment-3"&gt;&lt;span&gt;Three&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;div id="fragment-1"&gt;
		&lt;p&gt;First tab is active by default:&lt;/p&gt;
		&lt;pre&gt;&lt;code&gt;$( "#tabs" ).tabs(); &lt;/code&gt;&lt;/pre&gt;
	&lt;/div&gt;
	&lt;div id="fragment-2"&gt;
		Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
		Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
	&lt;/div&gt;
	&lt;div id="fragment-3"&gt;
		Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
		Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
		Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.
	&lt;/div&gt;
&lt;/div&gt;
</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="toggle" type="method" return="jQuery">
	<title>.toggle()</title>
	<desc>Display or hide the matched elements, using custom effects.</desc>
	<longdesc>
		<p>This plugin extends jQuery's built-in  method. If jQuery UI is not loaded, calling the <code>.toggle()</code> method may not fail directly, as the method still exists. However, the expected behavior will not occur.</p>
	</longdesc>
	<signature>
		<argument name="effect" type="String">
			<desc>A string indicating which <a href="/category/effects/">effect</a> to use for the transition.</desc>
		</argument>
		<argument name="options" type="Object" optional="true">
			<desc>Effect-specific settings and <a href="/easings/">easing</a>.</desc>
		</argument>
		<argument name="duration" default="400" optional="true">
	<desc>A string or number determining how long the animation will run.</desc>
	<type name="Number">
		<desc>The duration in milliseconds.</desc>
	</type>
	<type name="String">
		<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
	</type>
</argument>
		<argument name="complete" type="Function" optional="true">
	<desc>A function to call once the animation is complete.</desc>
</argument>
	</signature>
	<signature>
	<argument name="options" type="Object">
		<desc>All animation settings. The only required property is <code>effect</code>.</desc>
		<property name="effect" type="String">
			<desc>A string indicating which <a href="/category/effect/">effect</a> to use for the transition.</desc>
		</property>
		<property name="easing" type="String" default="&quot;swing&quot;">
			<desc>A string indicating which <a href="/easings/">easing</a> function to use for the transition.</desc>
		</property>
		<property name="duration" default="400">
			<desc>A string or number determining how long the animation will run.</desc>
			<type name="Number">
				<desc>The duration in milliseconds.</desc>
			</type>
			<type name="String">
				<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
			</type>
		</property>
		<property name="complete" type="Function">
			<desc>A function to call once the animation is complete.</desc>
		</property>
	</argument>
</signature>
	<example>
		<height>150</height>
		<desc>Toggle a div using the fold effect.</desc>
		<css>
	div {
		width: 100px;
		height: 100px;
		background: #ccc;
		border: 1px solid #000;
	}
</css>
		<html>
&lt;button&gt;toggle the div&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</html>
		<code>
$( "button" ).click(function() {
	$( "div" ).toggle( "fold", 1000 );
});
</code>
	</example>
	<category slug="methods"/>
	<category slug="effects"/>
	<category slug="effects-core"/>
	<category slug="overrides"/>
</entry><entry name="toggleClass" type="method" return="jQuery">
	<title>.toggleClass()</title>
	<desc>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument, while animating all style changes.</desc>
	<longdesc>
		<div>
	<p>Similar to native CSS transitions, jQuery UI's class animations provide a smooth transition from one state to another while allowing you to keep all the details about which styles to change in CSS and out of your JavaScript. All class animation methods, including <code>.toggleClass()</code>, support custom durations and easings, as well as providing a callback for when the animation completes.</p>
	<p>Not all styles can be animated. For example, there is no way to animate a background image. Any styles that cannot be animated will be changed at the end of the animation.</p>
</div>
		<p>This plugin extends jQuery's built-in  method. If jQuery UI is not loaded, calling the <code>.toggleClass()</code> method may not fail directly, as the method still exists. However, the expected behavior will not occur.</p>
	</longdesc>
	<signature>
		<argument name="className" type="String">
			<desc>One or more class names (space separated) to be toggled for each element in the matched set.</desc>
		</argument>
		<argument name="switch" type="Boolean" optional="true">
			<desc>A boolean value to determine whether the class should be added or removed.</desc>
		</argument>
		<argument name="duration" default="400" optional="true">
	<desc>A string or number determining how long the animation will run.</desc>
	<type name="Number">
		<desc>The duration in milliseconds.</desc>
	</type>
	<type name="String">
		<desc>The strings <code>"fast"</code> and <code>"slow"</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</desc>
	</type>
</argument>
		<argument name="easing" type="String" default="swing" optional="true">
	<desc>A string indicating which <a href="/easings/">easing</a> function to use for the transition.</desc>
</argument>
		<argument name="complete" type="Function" optional="true">
	<desc>A function to call once the animation is complete.</desc>
</argument>
	</signature>
	<example>
		<height>220</height>
		<desc>Toggles the class "big-blue" for the matched elements.</desc>
		<css>
	div {
		width: 100px;
		height: 100px;
		background-color: #ccc;
	}
	.big-blue {
		width: 200px;
		height: 200px;
		background-color: #00f;
	}
</css>
		<html>
&lt;div&gt;&lt;/div&gt;
</html>
		<code>
$( "div" ).click(function() {
	$( this ).toggleClass( "big-blue", 1000, "easeOutSine" );
});
</code>
	</example>
	<category slug="effects"/>
	<category slug="effects-core"/>
	<category slug="overrides"/>
</entry><entry name="tooltip" type="widget" animated-element="tooltip" widget-element="original element">
	<title>Tooltip Widget</title>
	<desc>Customizable, themeable tooltips, replacing native tooltips.</desc>
	<longdesc>
		<p>Tooltip replaces native tooltips, making them themeable as well as allowing various customizations:</p>

		<ul>
			<li>Display other content than just the title, like inline footnotes or extra content retrieved via Ajax.</li>
			<li>Customize the positioning, e.g., to center the tooltip above elements.</li>
			<li>Add extra styling to customize the appearance, for warning or error fields.</li>
		</ul>

		<p>A fade animation is used by default to show and hide the tooltip, making the appearance a bit more organic, compared to just toggling the visibility. This can be customized with the <a href="#option-show"><code>show</code></a> and <a href="#option-hide"><code>hide</code></a> options.</p>

		<p>The <a href="#option-items"><code>items</code></a> and <a href="#option-content"><code>content</code></a> options need to stay in-sync. If you change one of them, you need to change the other.</p>

		<p>In general, disabled elements do not trigger any DOM events. Therefore, it is not possible to properly control tooltips for disabled elements, since we need to listen to events to determine when to show and hide the tooltip. As a result, jQuery UI does not guarantee any level of support for tooltips attached to disabled elements. Unfortunately, this means that if you require tooltips on disabled elements, you may end up with a mixture of native tooltips and jQuery UI tooltips.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/category/ui-core/">UI Core</a></li>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
			<li><a href="/position/">Position</a></li>
			<li><a href="/category/effects-core/">Effects Core</a> (optional; for use with the <a href="#option-show"><code>show</code></a> and <a href="#option-hide"><code>hide</code></a> options)</li>
		</ul>
	</longdesc>
	<note>
			This widget requires some functional CSS, otherwise it won't work. If you build a custom theme, use the widget's specific CSS file as a starting point.
		</note>
	<added>1.9</added>
	<options>
		<option name="content" default="function returning the title attribute" example-value="&quot;Awesome title!&quot;">
			<desc>
				<p>The content of the tooltip.</p>

				<p><em>When changing this option, you likely need to also change the <a href="#option-items"><code>items</code></a> option.</em></p>
			</desc>
			<type name="Function">
				<desc>A callback which can either return the content directly, or call the first argument, passing in the content, e.g., for Ajax content.</desc>
			</type>
			<type name="String">
				<desc>A string of HTML to use for the tooltip content.</desc>
			</type>
		</option>
		<option name="disabled" default="false" example-value="true">
	<desc>Disables the tooltip if set to <code>true</code>.</desc>
	<type name="Boolean"/>
</option>
		<option name="hide" default="null" example-value="{ effect: &quot;explode&quot;, duration: 1000 }">
	<desc>If and how to animate the hiding of the tooltip.</desc>
	<type name="Boolean">
		<desc>
			When set to <code>false</code>, no animation will be used and the tooltip will be hidden immediately.
			When set to <code>true</code>, the tooltip will fade out with the default duration and the default easing.
		</desc>
	</type>
	<type name="Number">
		<desc>
			The tooltip will fade out with the specified duration and the default easing.
		</desc>
	</type>
	<type name="String">
		<desc>
			The tooltip will be hidden using the specified effect.
			The value can either be the name of a built-in jQuery animation method, such as <code>"slideUp"</code>, or the name of a jQuery UI effect, such as <code>"fold"</code>.
			In either case the effect will be used with the default duration and the default easing.
		</desc>
	</type>
	<type name="Object">
		<desc>If the value is an object, then <code>effect</code>, <code>delay</code>, <code>duration</code>, and <code>easing</code> properties may be provided. If the <code>effect</code> property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If <code>duration</code> or <code>easing</code> is omitted, then the default values will be used. If <code>effect</code> is omitted, then <code>"fadeOut"</code> will be used. If <code>delay</code> is omitted, then no delay is used.</desc>
	</type>
</option>
		<option name="items" default="[title]" example-value="&quot;img[alt]&quot;">
			<desc>
				<p>A selector indicating which items should show tooltips. Customize if you're using something other then the title attribute for the tooltip content, or if you need a different selector for event delegation.</p>

				<p><em>When changing this option, you likely need to also change the <a href="#option-content"><code>content</code></a> option.</em></p>
			</desc>
			<type name="Selector"/>
		</option>
		<option name="position" default="{ my: &quot;left top+15&quot;, at: &quot;left bottom&quot;, collision: &quot;flipfit&quot; }" example-value="{ my: &quot;left+15 center&quot;, at: &quot;right center&quot; }">
			<desc>
				<p>Identifies the position of the tooltip in relation to the associated target element. The <code>of</code> option defaults to the target element, but you can specify another element to position against. You can refer to the <a href="/position">jQuery UI Position</a> utility for more details about the various options.</p>
			</desc>
			<type name="Object"/>
		</option>
		<option name="show" default="null" example-value="{ effect: &quot;blind&quot;, duration: 800 }">
	<desc>If and how to animate the showing of the tooltip.</desc>
	<type name="Boolean">
		<desc>
			When set to <code>false</code>, no animation will be used and the tooltip will be shown immediately.
			When set to <code>true</code>, the tooltip will fade in with the default duration and the default easing.
		</desc>
	</type>
	<type name="Number">
		<desc>
			The tooltip will fade in with the specified duration and the default easing.
		</desc>
	</type>
	<type name="String">
		<desc>
			The tooltip will be shown using the specified effect.
			The value can either be the name of a built-in jQuery animation method, such as <code>"slideDown"</code>, or the name of a jQuery UI effect, such as <code>"fold"</code>.
			In either case the effect will be used with the default duration and the default easing.
		</desc>
	</type>
	<type name="Object">
		<desc>If the value is an object, then <code>effect</code>, <code>delay</code>, <code>duration</code>, and <code>easing</code> properties may be provided. If the <code>effect</code> property contains the name of a jQuery method, then that method will be used; otherwise it is assumed to be the name of a jQuery UI effect. When using a jQuery UI effect that supports additional settings, you may include those settings in the object and they will be passed to the effect. If <code>duration</code> or <code>easing</code> is omitted, then the default values will be used. If <code>effect</code> is omitted, then <code>"fadeIn"</code> will be used.  If <code>delay</code> is omitted, then no delay is used.</desc>
	</type>
</option>
		<option name="tooltipClass" default="null" example-value="&quot;custom-tooltip-styling&quot;">
			<desc>
				A class to add to the widget, can be used to display various tooltip types, like warnings or errors.
				<p>This may get replaced by the <a href="http://bugs.jqueryui.com/ticket/7053">classes option</a>.</p>
			</desc>
			<type name="String"/>
		</option>
		<option name="track" type="Boolean" default="false" example-value="true">
			<desc>
				Whether the tooltip should track (follow) the mouse.
			</desc>
		</option>
	</options>
	<methods>
		<method name="close">
			<desc>
				Closes a tooltip. This is only intended to be called for non-delegated tooltips.
			</desc>
		</method>
		<method name="destroy">
	<desc>
		Removes the tooltip functionality completely. This will return the element back to its pre-init state.
	</desc>
</method>
		<method name="disable">
	<desc>
		Disables the tooltip.
	</desc>
</method>
		<method name="enable">
	<desc>
		Enables the tooltip.
	</desc>
</method>
		<method name="open">
			<desc>
				Programmatically open a tooltip. This is only intended to be called for non-delegated tooltips.
			</desc>
		</method>
		<method name="option" return="jQuery">
	<desc>
		Sets one or more options for the tooltip.
	</desc>
	<signature return="Object" example-return-var="isDisabled" example-params="&quot;disabled&quot;">
		<desc>Gets the value currently associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to get.</desc>
		</argument>
	</signature>
	<signature return="PlainObject" example-return-var="options">
		<desc>Gets an object containing key/value pairs representing the current tooltip options hash.</desc>
	</signature>
	<signature example-params="&quot;disabled&quot;, true">
		<desc>Sets the value of the tooltip option associated with the specified <code>optionName</code>.</desc>
		<argument name="optionName" type="String">
			<desc>The name of the option to set.</desc>
		</argument>
		<argument name="value" type="Object">
			<desc>A value to set for the option.</desc>
		</argument>
	</signature>
	<signature example-params="{ disabled: true }">
		<desc>Sets one or more options for the tooltip.</desc>
		<argument name="options" type="Object">
			<desc>A map of option-value pairs to set.</desc>
		</argument>
	</signature>
</method>
		<method name="widget" return="jQuery" example-return-var="widget">
	<desc>
		Returns a <code>jQuery</code> object containing the original element.
	</desc>
</method>
	</methods>
	<events>
		<event name="create">
	<desc>
		Triggered when the tooltip is created.
	</desc>
	<argument name="event" type="Event"/>
	<argument name="ui" type="Object"/>
</event>
		<event name="open">
			<desc>
				Triggered when a tooltip is shown, triggered on <code>focusin</code> or <code>mouseover</code>.
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="tooltip" type="jQuery">
					<desc>The generated tooltip element.</desc>
				</property>
			</argument>
		</event>
		<event name="close">
			<desc>
				Triggered when a tooltip is closed, triggered on <code>focusout</code> or <code>mouseleave</code>.
			</desc>
			<argument name="event" type="Event"/>
			<argument name="ui" type="Object">
				<property name="tooltip" type="jQuery">
					<desc>The generated tooltip element.</desc>
				</property>
			</argument>
		</event>
	</events>
	<example>
		<height>80</height>
		<desc>Create a tooltip on the document, using event delegation for all elements with a title attribute.</desc>
		<code>
	$( document ).tooltip();
</code>
		<html>
&lt;p&gt;
	&lt;a href="#" title="Anchor description"&gt;Anchor text&lt;/a&gt;
	&lt;input title="Input help"&gt;
&lt;/p&gt;</html>
	</example>
	<category slug="widgets"/>
</entry><entry name="transfer" type="effect">
	<title>Transfer Effect</title>
	<desc>Transfers the outline of an element to another element</desc>
	<longdesc>
		<p>Very useful when trying to visualize interaction between two elements.</p>
		<p>The transfer element itself has the class <code>ui-effects-transfer</code>, and needs to be styled by you, for example by adding a background or border.</p>
	</longdesc>
	<arguments>
		<argument name="className" type="String">
			<desc>argumental class name the transfer element will receive.</desc>
		</argument>
		<argument name="to" type="String">
			<desc>jQuery selector, the element to transfer to.</desc>
		</argument>
	</arguments>
	<example>
		<height>150</height>
		<desc>Clicking on the green element transfers to the other.</desc>
		<css>
	div.green {
		width: 100px;
		height: 80px;
		background: green;
		border: 1px solid black;
		position: relative;
	}
	div.red {
		margin-top: 10px;
		width: 50px;
		height: 30px;
		background: red;
		border: 1px solid black;
		position: relative;
	}
	.ui-effects-transfer {
		border: 1px dotted black;
	}
</css>
		<code>
$( "div" ).click(function() {
	var i = 1 - $( "div" ).index( this );
	$( this ).effect( "transfer", { to: $( "div" ).eq( i ) }, 1000 );
});
</code>
		<html>
&lt;div class="green"&gt;&lt;/div&gt;
&lt;div class="red"&gt;&lt;/div&gt;
</html>
	</example>
	<category slug="effects"/>
</entry><entry type="method" name="uniqueId" return="jQuery">
	<title>.uniqueId()</title>
	<desc>Generate and apply a unique id for the set of matched elements.</desc>
	<signature>
		<added>1.9</added>
	</signature>
	<longdesc>
		<p>Many widgets need to generate unique ids for elements. <code>.uniqueId()</code> will check if the element has an id, and if not, it will generate one and set it on the element. It is safe to call <code>.uniqueId()</code> on an element without checking if it already has an id. If/when the widget needs to clean up after itself, the <a href="/removeUniqueId"><code>.removeUniqueId()</code></a> method will remove the id from the element if it was added by <code>.uniqueId()</code> and leave the id alone if it was not. <code>.removeUniqueId()</code> is able to be smart about this because the generated ids have a prefix of <code>"ui-id-"</code>.</p>
	</longdesc>
	<category slug="methods"/>
	<category slug="ui-core"/>
</entry><entry type="method" name="zIndex" return="jQuery">
		<title>.zIndex()</title>
		<desc>Get the z-index for an element.</desc>
		<signature/>
		<longdesc>
			<p>The <code>.zIndex()</code> method is useful for finding the z-index of an element, regardless of whether the z-index is set directly on the element or on one of its ancestors. In order to determine the z-index, this method will start at the specified element and walk up the DOM until it finds an element that is positioned and has a z-index set. If no such element is found, then the method will return a value of <code>0</code>.</p>
			<p>This method assumes that elements with nested z-indexes would not have a z-index of <code>0</code>. For example, given the following DOM the inner element will be treated as if it does not have a z-index set because it is impossible to differentiate between an explicit value of <code>0</code> and no value in Internet Explorer.</p>
			<pre><code>
				&lt;div style="z-index: -10;"&gt;
					&lt;div style="z-index: 0;"&gt;&lt;/div&gt;
				&lt;/div&gt;
			</code></pre>
		</longdesc>
		<category slug="methods"/>
		<category slug="ui-core"/>
	</entry><entry type="method" name="zIndex" return="Integer">
		<title>.zIndex()</title>
		<desc>Set the z-index for an element.</desc>
		<signature>
			<argument name="zIndex" type="Integer">
				<desc>The z-index to set.</desc>
			</argument>
		</signature>
		<longdesc>
			<p>This is equivalent to <code>.css( "zIndex", zIndex )</code>.</p>
		</longdesc>
		<category slug="methods"/>
		<category slug="ui-core"/>
	</entry><entry type="widget" name="mouse">
	<title>Mouse Interaction</title>
	<desc>The base interaction layer.</desc>
	<longdesc>
		<p>Similar to <a href="/jQuery.Widget#jQuery-Widget2"><code>jQuery.Widget</code></a>, the mouse interaction is not intended to be used directly. It is purely a base layer for other widgets to inherit from. This page only documents what is added to <code>jQuery.Widget</code>, but it does include internal methods that are not intended to be overwritten. The intended public API is <a href="#method-_mouseStart"><code>_mouseStart()</code></a>, <a href="#method-_mouseDrag"><code>_mouseDrag()</code></a>, <a href="#method-_mouseStop"><code>_mouseStop()</code></a>, and <a href="#method-_mouseCapture"><code>_mouseCapture()</code></a>.</p>

		<h3>Dependencies</h3>
		<ul>
			<li><a href="/jQuery.widget/">Widget Factory</a></li>
		</ul>
	</longdesc>
	<options>
		<option name="cancel" type="Selector" default="&quot;input,textarea,button,select,option&quot;" example-value="&quot;.title&quot;">
			<desc>Prevents interactions from starting on specified elements.</desc>
		</option>
		<option name="delay" type="Number" default="0" example-value="300">
			<desc>Time in milliseconds after mousedown until the interaction should start. This option can be used to prevent unwanted interactions when clicking on an element.</desc>
		</option>
		<option name="distance" type="Number" default="1" example-value="10">
			<desc>Distance in pixels after mousedown the mouse must move before the interaction should start. This option can be used to prevent unwanted interactions when clicking on an element.</desc>
		</option>
	</options>
	<methods>
		<method name="_mouseInit">
			<desc>
				Initializes the interaction event handlers. This must be called from the extending widget's <code>_create()</code> method.
			</desc>
		</method>
		<method name="_mouseDestroy">
			<desc>
				Destroys the interaction event handlers. This must be called from the extending widget's <code>_destroy()</code> method.
			</desc>
		</method>
		<method name="_mouseDown">
			<desc>
				Handles the beginning of an interaction. Verifies that the event is associated with the primary mouse button and ensures that the <a href="#option-delay"><code>delay</code></a> and <a href="#option-distance"><code>distance</code></a> options are met prior to starting the interaction. When the interaction is ready to start, invokes the <a href="#method-_mouseStart"><code>_mouseStart()</code></a> method for the extending widget to handle.
			</desc>
		</method>
		<method name="_mouseMove">
			<desc>
				Handles each movement of the interaction. Invokes the <a href="#method-_mouseDrag"><code>mouseDrag()</code></a> method for the extending widget to handle.
			</desc>
		</method>
		<method name="_mouseUp">
			<desc>
				Handles the end of the interaction. Invokes the <a href="#method-_mouseStop"><code>mouseStop()</code></a> method for the extending widget to handle.
			</desc>
		</method>
		<method name="_mouseDistanceMet" return="Boolean">
			<desc>
				Determines whether the <a href="#option-distance"><code>distance</code></a> option has been met for the current interaction.
			</desc>
		</method>
		<method name="_mouseDelayMet" return="Boolean">
			<desc>
				Determines whether the <a href="#option-delay"><code>delay</code></a> option has been met for the current interaction.
			</desc>
		</method>
		<method name="_mouseStart">
			<desc>
				The extending widget should implement a <code>_mouseStart()</code> method to handle the beginning of an interaction. This method will receive the mouse event associated with the start of the interaction.
			</desc>
		</method>
		<method name="_mouseDrag">
			<desc>
				The extending widget should implement a <code>_mouseDrag()</code> method to handle each movement of an interaction. This method will receive the mouse event associated with the movement.
			</desc>
		</method>
		<method name="_mouseStop">
			<desc>
				The extending widget should implement a <code>_mouseStop()</code> method to handle the end of an interaction. This method will receive the mouse event associated with the end of the interaction.
			</desc>
		</method>
		<method name="_mouseCapture" return="Boolean">
			<desc>
				Determines whether an interaction should start based on event target of the interaction. The default implementation always returns <code>true</code>.
			</desc>
		</method>
	</methods>
	<category slug="utilities"/>
	<category slug="interactions"/>
</entry></entries></api>